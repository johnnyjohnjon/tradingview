{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/SearchItem.js","components/SearchResults.js","components/Header.js","components/Footer.js","components/Trade.js","components/TradeList.js","components/Backtest.js","components/Homepage.js","components/BacktestList.js","components/AddBacktest.js","components/chart-components/Candle.js","components/chart-components/CrossHairs.js","components/chart-components/Chart.js","components/GraphSection.js","App.js","index.js"],"names":["logger","state","action","type","backtests","filter","backtest","id","payload","graphData_AV_API","symbol_list","current_symbol","cache_TSDA","current_company","cache_TS15min","cache_TS60min","graph_type","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","data","Note","alert","searchInputClear","searchInput","fetch","text","response","json","new_symbol_list","Object","keys","bestMatches","forEach","e","new_symbol","symbol","name","reverse","selectedSymbol","selectedCompany","graphType","doClearCache","interval_API","cache_exists","function_API","outputSize","window","scrollTo","Provider","value","deleteBacktest","addBacktest","clearSearch","stockSearch","graphSymbol","cache_TSDA_function","CSS","styled","div","SearchItem","mySymbol","useContext","console","log","className","onClick","SearchResults","useState","setSearch","ref","wrapperRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","length","map","Header","href","rel","integrity","crossOrigin","src","alt","onSubmit","preventDefault","style","paddingLeft","placeholder","onChange","color","Footer","Trade","props","trade","buyDate","buyPrice","indicatorAtBuy","toFixed","sellDate","sellPrice","indicatorAtSell","numShares","profitUSD","profitPercent","candleLength","TradeList","tradeList","myId","Backtest","getTodayDate","Date","toISOString","slice","tradeListData","setTradeListData","seriesType","setSeriesType","indicator","defaultTimePeriod","timePeriod","setTimePeriod","stdDeviation","setStdDeviation","setFullYear","getFullYear","startDate","setStartDate","endDate","setEndDate","maxBags","setMaxBags","initalBalance","setInitialBalance","initalBuyType","setInitalBuyType","initalBuyAmount","setInitalBuyAmount","buyStrategyValue","setBuyStrategyValue","buyStrategyType","setBuyStrategyType","sellStrategyValue","setSellStrategyValue","dropdownItems","items","item","calcInitalBuy","buyType","buyAmount","currentBalance","curStockPrice","isBuyConditionMet","curIndicatorValue","getIndicatorJSON","finalizeTrade","myBag","candleCountSell","percentChange","push","numTrades","netBars","netSellVolume","paperAPICall","pairSettings","stockPriceData","optionalParameters","stockIndicatorData","didRun","candleCount","bagList","startDateReached","lowestSellPrice","entries","key","startPrice","endPrice","newBagVolume","Math","min","newBagListKeys","holdReturn","profitPercentOnBalance","profitPercentOnTrades","avgBars","onFocus","currentTarget","runBacktests","indicatorSettingDOM","buyStrategyDOM","immediatelyCalculate","uglyDate","array","toString","split","shift","join","formatDate","tradeData","Homepage","BacktestList","AddBacktest","newBacktest","uuid","Candle","x","candle_width","pixelFor","up","close","open","bar_top","bar_bottom","bar_height","wick_top","high","wick_bottom","low","y","width","height","abs","classNames","candle","down","wick","top","x1","y1","x2","y2","bottom","CrossHairs","chart_dims","pixel_width","cross_hair","horz","pixel_height","vert","Chart","chart_width","chart_height","mouseCoords","setMouseCoords","dollar_high","max","apply","bar","dollar_low","floor","dollar_delta","dollarAt","pixel","dollar","candleDataAt","candleChange","change","graphTypeStr","onMouseMove","nativeEvent","round","getBoundingClientRect","left","offsetX","offsetY","onMouseLeave","i","candle_x","fill","rx","ry","fontSize","dateString","myYear","substring","myMonth","parseInt","myDay","convertDate","englishStr","changePercent","changeUSD","mouseOffChartJSX","GraphSection","myWindow","undefined","windowSize","setWindowSize","handleResize","innerWidth","innerHeight","useWindowSize","processGraphData","time_series_type","time_series_isDaily","split_ratio","graphDataProcessed","date_counter","previous_date","stop_graphing","myDate","substr","flat_candle","setData","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.39a39c97.chunk.js","sourcesContent":["const logger = (state, action) => {\n  switch(action.type) {\n    case 'DELETE_BACKTEST':\n      return {\n        ...state,\n        backtests: state.backtests.filter(backtest => backtest.id !== action.payload)\n      }\n    case 'ADD_BACKTEST':\n      return {\n        ...state,\n        backtests: [action.payload, ...state.backtests]\n      }\n    case 'STOCK_SEARCH':\n      return {\n        ...state,\n        graphData_AV_API: state.graphData_AV_API,\n        symbol_list: action.payload,\n        current_symbol: state.current_symbol\n      }\n    case 'MAX_API':\n      return {\n        ...state\n      }\n    case 'FILL_CACHE_TSDA':\n      return {\n        ...state,\n        cache_TSDA: action.payload['Time Series (Daily)'] ? action.payload : state.cache_TSDA\n      }\n    case 'DISPLAY_GRAPHS':\n      return {\n        ...state,\n        graphData_AV_API: action.payload[1],\n        symbol_list: [],\n        current_symbol: action.payload[1]['Meta Data']['2. Symbol'],\n        current_company: action.payload[2],\n        cache_TSDA: action.payload[1]['Time Series (Daily)'] ? action.payload[1] : state.cache_TSDA,\n        cache_TS15min: action.payload[1]['Time Series (15min)'] ? action.payload[1] : state.cache_TS15min,\n        cache_TS60min: action.payload[1]['Time Series (60min)'] ? action.payload[1] : state.cache_TS60min,\n        graph_type: action.payload[0]\n      }\n    default:\n      return state;\n  }\n}\n\nexport default logger;\n","import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// AlphaVantage API Key = CQ5JZQYM4DG0OODA\n\n// Initial state\nconst initialState = {\n    backtests: [],     // Backtest list\n    symbol_list: [],      // user input search results (1 API call)\n    graphData_AV_API: {}, // graphs historical stock data (1 API call)\n    current_symbol: '',   // current stock symbol being graphed\n    current_company: '',  // current stock company name being graphed\n    graph_type: '',       // tracks graph type for graphSection.js to know to add proper amount of candles to chart\n    cache_TSDA: {},        // cache AV_API for time series daily adjusted until user changes stock view(prevents unnecssary API calls)\n    cache_TS15min: {},        // cache AV_API for time series 15 min until user changes stock view(prevents unnecssary API calls)\n    cache_TS60min: {}        // cache AV_API for time series 60 min until user changes stock view(prevents unnecssary API calls)\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    function deleteBacktest(id) {\n        dispatch({\n            type: 'DELETE_BACKTEST',\n            payload: id\n        });\n    }\n\n    function addBacktest(backtest) {\n        dispatch({\n            type: 'ADD_BACKTEST',\n            payload: backtest\n        });\n    }\n\n    async function cache_TSDA_function(data) {\n        // If API limit: Alerts API limit reached, maintains current payload(stock data)\n        // Else: update current payload\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. PeakTrades was built using Alpha Vantage's free API where the call frequency is 5 calls per minute.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: data\n            });\n        }else{\n            dispatch({\n                type: 'FILL_CACHE_TSDA',\n                payload: data\n            });\n        }\n    }\n\n    // User clicks outside search results\n    async function clearSearch(searchInputClear) {\n        dispatch({\n            type: 'STOCK_SEARCH',\n            payload: []\n        });\n    }\n\n    // Updates search results from API when user searches for a stock\n    async function stockSearch(searchInput) {\n        //API call for searching stock tickers\n        let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n        let data = await response.json();\n\n        //create temp list\n        let new_symbol_list = [];\n\n        // If API limit: alerts, maintains current results(if any)\n        // Else: updates search results display properly\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n            // Maintains current search results\n            dispatch({\n                type: 'MAX_API',\n                payload: new_symbol_list\n            });\n        }else{\n        //iterate over all search results\n        Object.keys(data.bestMatches).forEach( (e) => {\n            //filter non-US stocks, then add\n            if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n            let new_symbol = {\n                symbol: data.bestMatches[e][\"1. symbol\"],\n                name: data.bestMatches[e][\"2. name\"]\n            }\n            new_symbol_list = [new_symbol, ...new_symbol_list];\n            }\n        });\n        new_symbol_list.reverse();\n        //update state of web app (official symbol_list)\n        dispatch({\n            type: 'STOCK_SEARCH',\n            payload: new_symbol_list\n        });\n        }\n    }\n\n    // Graphs API data based on user selected stock symbol\n    async function graphSymbol(selectedSymbol, selectedCompany, graphType, doClearCache) {\n        // Clear cache for new symbol search\n        if(doClearCache){\n            state.cache_TSDA = {};\n            state.cache_TS15min = {};\n            state.cache_TS60min = {};\n        }\n\n        // Specific API call parameters\n        let function_API;\n        let outputSize;\n        let interval_API = '';\n        let cache_exists = false;\n        let data;\n        let response;\n        switch(graphType){\n            case 'day':\n                if(state.cache_TS15min['Time Series (15min)']){\n                    cache_exists = true;\n                    data = state.cache_TS15min;\n                }else{\n                    function_API = 'TIME_SERIES_INTRADAY';\n                    interval_API = '&interval=15min';\n                    outputSize = 'compact';\n                }\n                break;\n            case 'week':\n                if(state.cache_TS60min['Time Series (60min)']){\n                    cache_exists = true;\n                    data = state.cache_TS60min;\n                }else{\n                    function_API = 'TIME_SERIES_INTRADAY';\n                    interval_API = '&interval=60min';\n                    outputSize = 'compact';\n                }\n                break;\n            default:\n                if(state.cache_TSDA['Time Series (Daily)']){\n                    cache_exists = true;\n                    data = state.cache_TSDA;\n                }else{\n                    function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n                    outputSize = 'full';\n                }\n        }\n        if(!cache_exists){\n            response = await fetch(`https://www.alphavantage.co/query?function=${function_API}&symbol=${selectedSymbol}${interval_API}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`);\n            data = await response.json();\n        }\n\n\n\n        // If API limit: Alerts API limit reached, maintains current payload(stock data)\n        // Else: update current payload\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: [graphType,data]\n            });\n        }else if(data['Error Message']){\n            alert(\"ERROR. This stock does not have valid data in the Alpha Vantage database.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: [graphType,data]\n            });\n        }else{\n            dispatch({\n                type: 'DISPLAY_GRAPHS',\n                payload: [graphType,data, selectedCompany]\n            });\n        }\n\n        // Scroll to top, makes sure user sees graph\n        window.scrollTo(0, 0)\n    }\n\n    return (<GlobalContext.Provider value={{\n        backtests: state.backtests,\n        symbol_list: state.symbol_list,\n        graphData_AV_API: state.graphData_AV_API,\n        current_symbol: state.current_symbol,\n        current_company: state.current_company,\n        cache_TSDA: state.cache_TSDA,\n        cache_TS15min: state.cache_TS15min,\n        cache_TS60min: state.cache_TS60min,\n        graph_type: state.graph_type,\n        deleteBacktest,\n        addBacktest,\n        clearSearch,\n        stockSearch,\n        graphSymbol,\n        cache_TSDA_function\n    }}>\n        {children}\n        \n    </GlobalContext.Provider>);\n}\n","import React, {useContext} from 'react';\nimport styled from \"styled-components\";\nimport { GlobalContext } from '../context/GlobalState';\n\nconst CSS = styled.div`\n  width: fit;\n  background: transparent;\n\n  .search-item{\n    width:100%;\n    @media only screen and (max-width: 768px) {\n      width: 200%;\n    }\n    border:none;\n\n    border-bottom: 1px solid black;\n    background: #373641;\n    padding: 16px;\n    padding-bottom: 5px;\n    font-size: 16px;\n\n    text-align: left;\n    color: #dedfe4;\n    text-transform: uppercase;\n    font-weight: 420;\n    letter-spacing: 1.5px;      \n\n    &:focus, &:hover{\n      outline: none;\n      background: #3d3d4a;\n    }\n  }\n\n  .company-name{\n    color: #898996;\n    text-transform: capitalize;\n  }\n`;\n\n//graphSymbol(mySymbol.symbol, 'day', true)\nexport const SearchItem = ({ mySymbol }) => {\n  const { graphSymbol } = useContext(GlobalContext);\n  console.log(mySymbol.symbol, mySymbol.name);\n  return (\n    <div>\n      <CSS>\n        <button className=\"search-item\" onClick={() => graphSymbol(mySymbol.symbol, mySymbol.name, 'day', true)}>\n          <p>({mySymbol.symbol})<span className=\"company-name\"> {mySymbol.name}</span></p>\n        </button>\n      </CSS>\n    </div>\n  )\n}\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport styled from \"styled-components\";\nimport { SearchItem } from './SearchItem';\n\nimport { GlobalContext } from '../context/GlobalState';\n\nconst CSS = styled.div`\n  position: absolute;\n  z-index:2;\n  width: 24%;\n\n`;\n\nexport const SearchResults = () => {\n  const [text, setSearch] = useState(\"\");\n  const { symbol_list, clearSearch } = useContext(GlobalContext);\n\n  // Hook that alerts clicks outside of the passed ref\n  function useOutsideAlerter(ref) {\n    useEffect(() => {\n      /**\n       * Alert if clicked on outside of element\n       */\n      function handleClickOutside(event) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          // Code for user clicking outside search results\n          setSearch(\"\");\n          clearSearch(text);\n        }\n      }\n      // Bind the event listener\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        // Unbind the event listener on clean up\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  }\n\n  // Declare ref(search results) so outside can be referenced\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef);\n\n  return (\n    symbol_list.length>0 ?\n    <div className=\"col-4\" ref={wrapperRef}>\n    <CSS>\n      {symbol_list.map(mySymbol => (<SearchItem key={mySymbol.symbol} mySymbol={mySymbol} />))}\n    </CSS>\n    </div>\n    :\n    <></>\n  )\n}\n","import React, {useState, useContext} from 'react';\nimport styled from \"styled-components\";\nimport { SearchResults } from './SearchResults';\n\nimport { GlobalContext } from '../context/GlobalState';\n\nconst CSS = styled.div`\n  *{\n    font-family: 'Lato', sans-serif; \n  }\n\n  .title{\n    font-size: 28px; \n    font-weight: 300; \n    color: #dedfe4;\n\n    position: absolute;\n    padding-left: 115px;\n    top: 25px;\n  }\n  .search {\n    &__container {\n        width:55%;\n        float:left;\n        padding-left: 20%;\n        padding-top: 0px;\n    }\n    \n    &__title {\n      font-size: 28px; \n      font-weight: 300; \n      text-align: left;\n      color: #dedfe4;\n\n    }\n    \n    &__input {\n        width: 100%;\n        padding: 2.5% 4%;\n\n        background-color: transparent;\n        transition: transform 250ms ease-in-out;\n        font-size: 12px;\n        line-height: 15px;\n        \n        color: #898996;\n        text-transform: uppercase;\n        font-weight: 520;\n        letter-spacing: 1.5px;\n        background-color: transparent;\n \n        background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\");\n        background-repeat: no-repeat;\n        background-size: 18px 18px;\n        background-position: 97% center;\n        border-radius: 50px;\n        border: 1px solid #4f4f62;\n        transition: all 250ms ease-in-out;\n        backface-visibility: hidden;\n        transform-style: preserve-3d;\n\n        \n        &::placeholder {\n            color: #898996;\n            text-transform: uppercase;\n            font-weight: 520;\n            letter-spacing: 1.5px;\n        }\n        \n        &:hover,\n        &:focus {\n            padding: 12px 0;\n            outline: 0;\n            border: 1px solid transparent;\n            border-bottom: 1px solid #4f4f62;\n            border-radius: 0;\n            background-position: 100% center;\n        }\n    }\n  }\n\n  .logo-img{\n    width: 115px;\n    padding: 15px 24px;\n  }\n\n  .credits{\n    float:right;\n    width: 15%;\n    font-size: 15px;\n    font-weight: 350;\n    text-align: center;\n    color: white;\n    padding-top: 35px\n  }\n\n  \n  \n  background: #32323b;\n  .header{\n    width:100%;\n    height: 100px;\n    z-index:99;\n    position: fixed;\n    background: #32323b;\n  }\n\n  .search-credits{\n    width:80%;\n    float:right;\n  }\n`;\n\nexport const Header = () => {\n  const [text, setSearch] = useState('');\n\n  const { stockSearch } = useContext(GlobalContext);\n  \n  //running search for stocks\n  const onSubmit = e  => {\n    e.preventDefault();\n\n    const searchInput = { text: text };\n    if(!(searchInput.text.length===0))\n      stockSearch(searchInput);\n  }\n\n  return (\n    <CSS>\n      <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1\" crossOrigin=\"anonymous\"></link>\n      <nav className=\"header\">\n      \n        <img className=\"logo-img\" src=\"icons8-money-80.png\" alt=\"\"/>\n        <div className=\"title\">AlgoTrade</div>\n          \n\n        <div className=\"search-credits\">\n          <div className=\"search__container\"> \n            <form  onSubmit={onSubmit}>\n              <label className=\"search__title\" style={{paddingLeft:80}}>Search Company:</label>\n              <input className=\"search__input\" type=\"text\" placeholder=\"Search Tickers...\" onChange={(e) => setSearch(e.target.value)}/>\n              \n            </form>\n            <SearchResults />\n          </div>\n\n\n          <div className=\"credits\">\n             <a className=\"\" href=\"https://www.linkedin.com/in/john-duan/\" rel=\"noreferrer\" target=\"_blank\" style={{color:\"#61dafb\"}}> By Han</a>\n          </div>\n        </div>\n\n      </nav>\n    </CSS>\n  )\n}\n","import styled from \"styled-components\";\n\nconst CSS = styled.div`\n\n  p{\n    color: #898996;\n    padding: 2% 2% 2% 0%;\n    text-align: center;\n  }\n\n  background: #373641;\n\n`;\n\nexport const Footer = () => {\n  return (\n    <CSS>\n      <p>\n        AlgoTrade is a personal project developed by Han using React and Alphavantage’s stock API. \n      </p>\n    </CSS>\n  )\n}\n","import React from 'react';\nimport styled from \"styled-components\";\n\n  const CSS = styled.div`\n  \n    .trade-card{\n      margin-bottom: 10px;\n      font-size: 12px;\n      \n      display:block;\n      overflow:auto;\n\n      box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\n      background: #3d3d4a;  \n    }\n    .trade-card-sub{\n      float: left;\n      width: 33.33%;\n      padding: 1.25%;    \n    }\n    .result-item{\n      border-bottom: 2px solid #6464a3;\n      height: auto;\n      margin-bottom: 4%;\n      padding-bottom: 1%;\n    }\n    .result-title{\n      text-align: left;\n      color: #898996;\n      font-size: 12px;\n      width: 40%;\n    }\n    .result-output{\n      text-align: right;\n      color: #dedfe4;\n      font-size: 14px;\n      width: 60%;\n    }\n    .result-title-profit{\n      text-align: left;\n      color: #898996;\n      font-size: 12px;\n      width: 1%;\n\n    }\n    .result-output-profit{\n      text-align: right;\n      color: #dedfe4;\n      font-size: 14px;\n      width: 99%;\n\n    }\n  `;\n\nconst Trade = props => {\n  const { trade } = props;\n\n  return (\n    <CSS>\n      <div className=\"trade-card\">\n        <div className=\"trade-card-sub\">\n          <div className=\"result-item\">\n            <label className=\"result-title\">Buy Date: </label>\n            <label className=\"result-output\">{trade.buyDate}</label>\n          </div>\n          <div className=\"result-item\">\n            <label className=\"result-title\">Buy Price: </label>\n            <label className=\"result-output\">{trade.buyPrice}</label>\n          </div>\n          <div className=\"result-item\">\n            <label className=\"result-title\">Indicator Value at Buy: </label>\n            <label className=\"result-output\">{trade.indicatorAtBuy.toFixed(2)}</label>\n          </div>\n        </div>\n        <div className=\"trade-card-sub\">\n          <div className=\"result-item\">\n            <label className=\"result-title\">Sell Date:</label>\n            <label className=\"result-output\">{trade.sellDate}</label>\n          </div>\n          <div className=\"result-item\">\n            <label className=\"result-title\">Sell Price: </label>\n            <label className=\"result-output\">{trade.sellPrice}</label>\n          </div>\n          <div className=\"result-item\">\n            <label className=\"result-title\">Indicator Value at Sell: </label>\n            <label className=\"result-output\">{trade.indicatorAtSell.toFixed(2)}</label>\n          </div>\n        </div>\n        <div className=\"trade-card-sub\">\n          <div className=\"result-item\">\n            <label className=\"result-title\" data-tooltip=\"Number of shares for trade.\" data-tooltip-location=\"left\">Num of Shares:</label>\n            <label className=\"result-output\"> {trade.numShares.toFixed(2)}</label>\n          </div>\n          <div className=\"result-item\">\n            <label className=\"result-title-profit\" data-tooltip=\"Profit from this position.\" data-tooltip-location=\"left\">Profit: </label>\n            <label className=\"result-output-profit\">${trade.profitUSD.toFixed(2)}({trade.profitPercent>0?\"+\":\"\"}{(trade.profitPercent*100).toFixed(2)}%)</label>\n          </div>\n          <div className=\"result-item\">\n            <label className=\"result-title\" data-tooltip=\"Number of days between opening and closing this position.\"> Num Candles in Trade: </label>\n            <label className=\"result-output\">{trade.candleLength}</label>\n          </div>\n        </div>\n      </div>\n      \n    </CSS>\n  )\n}\n\nexport default Trade;","import React from 'react';\nimport Trade from './Trade';\n\nconst TradeList = props => {\n  const { tradeList } = props;\n  let myId = 0;\n  return (\n    <>\n      {tradeList.map(trade => (<Trade key={myId++} trade={trade} />))}\n    </>\n  )\n}\n\nexport default TradeList;","import React, {useState, useContext} from 'react';\nimport styled from \"styled-components\";\nimport TradeList from './TradeList';\n\nimport { GlobalContext } from '../context/GlobalState';\n//import { pairs } from 'd3';\n\nconst CSS = styled.div`\n  background: #3d3d4a;\n  color: #898996;\n  display:flex;\n\n  padding: 1%;\n  margin: 0% 0% 1% 0%;\n\n  .settings{\n    font-size: 16px;\n    padding: 1%;\n    width: 25%;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\n  }\n  .results-overview{\n    padding: 1%;\n    width: 24%;\n    font-size: 16px;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\n    margin: 0% 1%;\n  }\n  .list-of-trades{\n    padding:1%;\n    width: 50%;\n    font-size: 16px;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;\n\n  }\n\n\n  h4{\n    font-size: 180%;\n    border-bottom: 4px solid #898996;\n  }\n\n\n\n  /* left card CSS begin */\n  .input-flex{\n    display:flex;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;//#eff1f2;\n    color: #dedfe4;\n    width: 75%;\n    height: 2rem;\n    font-size: 16px;\n    padding-left: 0.5rem;\n    padding-top: 0.325rem;\n    padding-bottom: 0.325rem;\n    margin-bottom: 0.425rem;\n    \n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      ::placeholder{\n        color: #a5a5b0;\n      }\n      background: #dedfe4;\n    }\n    ::placeholder{\n      color: #dedfe4;\n    }\n  }\n\n  .input-inline{\n    display:inline;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;//#eff1f2;\n    color: #dedfe4;\n    width:10%;\n    height: 2rem;\n    font-size: 16px;\n    padding-left: 0.5rem;\n    padding-top: 0.325rem;\n    padding-bottom: 0.325rem;\n    margin-bottom: 0.425rem;\n    \n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      ::placeholder{\n        color: #a5a5b0;\n      }\n      background: #dedfe4;\n    }\n    ::placeholder{\n      color: #dedfe4;\n    }\n  }\n\n  .input-label{\n    color: #898996;\n    font-size: 14px;\n  }\n\n  .input-label-sub{\n    color: #898996;\n    font-style: italic;\n    font-size: 80%;\n    padding-left: 5%;\n    margin-bottom: 2%;\n  }\n\n  .input-select {\n    display:flex;\n    width: 75%;\n    color: #dedfe4;\n    border: none;\n    border-bottom: 2px solid #6464a3;\n    background: transparent;\n    height: 2rem;\n    font-size: 16px;\n    padding-left: 0.5rem;\n    margin-bottom: 0.425rem;\n\n    &:focus, &:hover{\n      outline: none;\n      color: #373641;\n      background: #dedfe4;\n    }\n  }\n\n\n  .calc-button {\n    display: block;\n    cursor: pointer;\n    outline: none;\n    border: none;\n    background-color: #dedfe4;\n    width: 200px;\n    height: 35px;\n    border-radius: 30px;\n    font-size: 18px;\n    font-weight: 600;\n    color: #373641;\n    background-size: 100% 100%;\n    box-shadow: 0 0 0 1px black inset;\n    margin: 1%;\n    margin-top: 3%;\n\n    @media only screen and (max-width: 968px) {\n      width: auto;\n    }\n  }\n  \n  .calc-button:hover {\n    background-image: linear-gradient(\n      145deg,\n      transparent 10%,\n      #89d47f 10% 20%,\n      transparent 20% 30%,\n      #89d47f 30% 40%,\n      transparent 40% 50%,\n      #89d47f 50% 60%,\n      transparent 60% 70%,\n      #89d47f 70% 80%,\n      transparent 80% 90%,\n      #89d47f 90% 100%\n    );\n    animation: background 6s linear infinite;\n\n\n    @media only screen and (max-width: 968px) {\n      width: auto;\n      color: #52515c;\n      background-color: #ebebeb;\n      background-image: none;\n    }\n  }\n\n  .del-button {\n    display: block;\n    cursor: pointer;\n    outline: none;\n    border: none;\n    background-color: #dedfe4;\n    width: 200px;\n    height: 35px;\n    border-radius: 30px;\n    font-size: 18px;\n    font-weight: 600;\n    color: #373641;\n    background-size: 100% 100%;\n    box-shadow: 0 0 0 1px black inset;\n    margin: 1%;\n    \n    margin-top: 3%;@media only screen and (max-width: 968px) {\n      width: auto;\n    }\n  }\n  \n  .del-button:hover {\n    background-image: linear-gradient(\n      145deg,\n      transparent 10%,\n      #d4847f 10% 20%,\n      transparent 20% 30%,\n      #d4847f 30% 40%,\n      transparent 40% 50%,\n      #d4847f 50% 60%,\n      transparent 60% 70%,\n      #d4847f 70% 80%,\n      transparent 80% 90%,\n      #d4847f 90% 100%\n    );\n    animation: background 6s linear infinite;\n    @media only screen and (max-width: 968px) {\n      width: auto;\n      color: #52515c;\n      background-color: #ebebeb;\n      background-image: none;\n    }\n  }\n  \n  @keyframes background {\n    0% {\n      background-position: 0 0;\n    }\n    100% {\n      background-position: 400px 0;\n    }\n  }\n  /* left card CSS end */\n  /* middle card CSS begin */\n  .result-item{\n    border-bottom: 2px solid #6464a3;\n    height: auto;\n    margin-bottom: 4%;\n    padding-bottom: 1%;\n  }\n  .result-title{\n    text-align: left;\n    color: #898996;\n    font-size: 14px;\n    width: 50%;\n  }\n  .result-output{\n    text-align: right;\n    color: #dedfe4;\n    font-size: 16px;\n    width: 50%;\n  }\n\n  .conclusion-title{\n    text-align: left;\n    color: #898996;\n    font-size: 14px;\n    width: 35%;\n  }\n  .backtest-won{\n    text-align: right;\n    font-size: 16px;\n    width: 65%;\n\n    color: #81dfc4;\n  }\n\n  .backtest-lost{\n    text-align: right;\n    font-size: 16px;\n    width: 65%;\n\n    color: #d75b6d;\n  }\n\n  .backtest-null{\n    text-align: right;\n    font-size: 16px;\n    width: 65%;\n\n    color: #dedfe4;\n  }\n  /* middle card CSS end */\n  /* right card CSS begin */\n  .trades-scroll{\n    font-size: 12px;\n    background-color: #373641;\n    padding: 1% 3%;\n    width:auto;\n    overflow-y:auto;\n    overflow-x:clip;\n    height: 750px;\n  }\n\n  /* right card CSS end */\n\n  /* Tooltip begin */\n  [data-tooltip] {\n    position: relative;\n    z-index: 10;\n  }\n\n  /* Positioning and visibility settings of the tooltip */\n  [data-tooltip]:before,\n  [data-tooltip]:after {\n    position: absolute;\n    visibility: hidden;\n    opacity: 0;\n    left: 50%;\n    bottom: calc(100% + 5px); /* 5px is the size of the arrow */\n    pointer-events: none;\n    transition: 0.2s;\n    will-change: transform;\n  }\n\n  /* The actual tooltip with a dynamic width */\n  [data-tooltip]:before {\n    content: attr(data-tooltip);\n    padding: 10px 18px;\n    min-width: 50px;\n    max-width: 300px;\n    width: max-content;\n    width: -moz-max-content;\n    border-radius: 6px;\n    font-size: 14px;\n    background-color: rgba(59, 72, 80, 0.9);\n    background-image: linear-gradient(30deg,\n      rgba(59, 72, 80, 0.44),\n      rgba(59, 68, 75, 0.44),\n      rgba(60, 82, 88, 0.44));\n    box-shadow: 0px 0px 24px rgba(0, 0, 0, 0.2);\n    color: #fff;\n    text-align: center;\n    white-space: pre-wrap;\n    transform: translate(-50%, -5px) scale(0.5);\n  }\n\n  /* Tooltip arrow */\n  [data-tooltip]:after {\n    content: '';\n    border-style: solid;\n    border-width: 5px 5px 0px 5px; /* CSS triangle */\n    border-color: rgba(55, 64, 70, 0.9) transparent transparent transparent;\n    transition-duration: 0s; /* If the mouse leaves the element, \n                                the transition effects for the \n                                tooltip arrow are \"turned off\" */\n    transform-origin: top;   /* Orientation setting for the\n                                slide-down effect */\n    transform: translateX(-50%) scaleY(0);\n  }\n\n  /* Tooltip becomes visible at hover */\n  [data-tooltip]:hover:before,\n  [data-tooltip]:hover:after {\n    visibility: visible;\n    opacity: 1;\n  }\n  /* Scales from 0.5 to 1 -> grow effect */\n  [data-tooltip]:hover:before {\n    transition-delay: 0.3s;\n    transform: translate(-50%, -5px) scale(1);\n  }\n  /* \n    Arrow slide down effect only on mouseenter (NOT on mouseleave)\n  */\n  [data-tooltip]:hover:after {\n    transition-delay: 0.5s; /* Starting after the grow effect */\n    transition-duration: 0.2s;\n    transform: translateX(-50%) scaleY(1);\n  }\n\n  /* LEFT */\n  /* Tooltip + arrow */\n  [data-tooltip-location=\"left\"]:before,\n  [data-tooltip-location=\"left\"]:after {\n    left: auto;\n    right: calc(100% + 5px);\n    bottom: 50%;\n  }\n\n  /* Tooltip */\n  [data-tooltip-location=\"left\"]:before {\n    transform: translate(-5px, 50%) scale(0.5);\n  }\n  [data-tooltip-location=\"left\"]:hover:before {\n    transform: translate(-5px, 50%) scale(1);\n  }\n\n  /* Arrow */\n  [data-tooltip-location=\"left\"]:after {\n    border-width: 5px 0px 5px 5px;\n    border-color: transparent transparent transparent rgba(55, 64, 70, 0.9);\n    transform-origin: left;\n    transform: translateY(50%) scaleX(0);\n  }\n  [data-tooltip-location=\"left\"]:hover:after {\n    transform: translateY(50%) scaleX(1);\n  }\n\n\n\n  /* RIGHT */\n  [data-tooltip-location=\"right\"]:before,\n  [data-tooltip-location=\"right\"]:after {\n    left: calc(100% + 5px);\n    bottom: 50%;\n  }\n\n  [data-tooltip-location=\"right\"]:before {\n    transform: translate(5px, 50%) scale(0.5);\n  }\n  [data-tooltip-location=\"right\"]:hover:before {\n    transform: translate(5px, 50%) scale(1);\n  }\n\n  [data-tooltip-location=\"right\"]:after {\n    border-width: 5px 5px 5px 0px;\n    border-color: transparent rgba(55, 64, 70, 0.9) transparent transparent;\n    transform-origin: right;\n    transform: translateY(50%) scaleX(0);\n  }\n  [data-tooltip-location=\"right\"]:hover:after {\n    transform: translateY(50%) scaleX(1);\n  }\n\n\n\n  /* BOTTOM */\n  [data-tooltip-location=\"bottom\"]:before,\n  [data-tooltip-location=\"bottom\"]:after {\n    top: calc(100% + 5px);\n    bottom: auto;\n  }\n\n  [data-tooltip-location=\"bottom\"]:before {\n    transform: translate(-50%, 5px) scale(0.5);\n  }\n  [data-tooltip-location=\"bottom\"]:hover:before {\n    transform: translate(-50%, 5px) scale(1);\n  }\n\n  [data-tooltip-location=\"bottom\"]:after {\n    border-width: 0px 5px 5px 5px;\n    border-color: transparent transparent rgba(55, 64, 70, 0.9) transparent;\n    transform-origin: bottom;\n  }\n\n  /* End of tooltips */\n\n`;\n\nexport const Backtest = ({ backtest }) => {\n\n  const defaultTimePeriod = () => {\n    switch(backtest.indicator){\n      case 'RSI': return 14;\n      case 'EMA': return 9;\n      case 'SMA': return 9;\n      case 'BB': return 20;\n      default: return 24;\n    }\n  }\n  const defaultBuyStrat = () => {\n    switch(backtest.indicator){\n      case 'RSI': return 30;\n      case 'EMA': return -3;\n      case 'SMA': return -3;\n      case 'BB': return -3;\n      default: return -3;\n    }\n  }\n\n  // Returns today date in YYYY-MM-DD formate\n  const getTodayDate = () => {\n    return new Date().toISOString().slice(0, 10);\n  }\n\n  // Returns 100 years ago today date in YYYY-MM-DD formate\n  const getOldDate = () => {\n    let myDate = new Date(new Date().setFullYear(new Date().getFullYear() - 100));\n    return myDate.toISOString().slice(0, 10);\n  }\n  \n  // Converts YYYY-MM-DD to DD/MM/YYYY\n  const formatDate = uglyDate => {\n    var array = (uglyDate || '').toString().split(/-/g);\n    array.push(array.shift());\n    return array.join('/') || null;\n  }\n\n  const [tradeListData, setTradeListData] = useState([]);\n\n  const [seriesType, setSeriesType] = useState('1. open');\n  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod());\n  const [stdDeviation, setStdDeviation] = useState(2);\n  const [startDate, setStartDate] = useState(getOldDate());\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  const [maxBags, setMaxBags] = useState(15);\n  const [initalBalance, setInitialBalance] = useState(3000);\n  const [initalBuyType, setInitalBuyType] = useState('usd');\n  const [initalBuyAmount, setInitalBuyAmount] = useState(100);\n  const [buyStrategyValue, setBuyStrategyValue] = useState(defaultBuyStrat());\n  const [buyStrategyType, setBuyStrategyType] = useState('Real Middle Band'); // Used for Bollinger upper/middle/lower\n  const [sellStrategyValue, setSellStrategyValue] = useState(1);\n\n  const { deleteBacktest, current_symbol, cache_TSDA, cache_TSDA_function } = useContext(GlobalContext);\n\n  // Used for JSX dropdown items\n  const dropdownItems = (items) => {\n    return items.map(item => <option value={item.value} key={item.name}>{item.name}</option>);\n  }\n\n  // Calculates USD value for creating a bag\n  function calcInitalBuy(buyType, buyAmount, currentBalance, curStockPrice) {\n    switch(buyType){\n      case \"numStocks\":\n        return curStockPrice*buyAmount;\n      case \"percent\":\n        return currentBalance * (buyAmount/100.00);\n      default:\n        // case \"usd\":\n        return buyAmount;\n\n    }\n  }\n\n  // Function to return true/false for buy condition, given price and indicator values\n  function isBuyConditionMet(buyStrategyValue, curStockPrice, curIndicatorValue) {\n    switch(backtest.indicator){\n      case \"RSI\":\n        return curIndicatorValue < buyStrategyValue;\n      default:\n        // case EMA, SMA, BB (all cases where indicator is a price of stock)\n        console.log(`price is ${curStockPrice}, indicator is ${curIndicatorValue}, buy Price`, (curIndicatorValue * ((100.0 + buyStrategyValue)/100.0)), curStockPrice <= (curIndicatorValue * ((100.0 + buyStrategyValue)/100.0)));\n\n        return curStockPrice <= (curIndicatorValue * ((100.0 + buyStrategyValue)/100.0));\n    }\n  }\n\n  // Returns JSON name of element for indicator item\n  function getIndicatorJSON() {\n    switch(backtest.indicator){\n      case \"BBANDS\":\n        return buyStrategyType;\n      default:\n        return backtest.indicator;\n\n    }\n  }\n\n  // Finalizes trade, storing buy/sell data into backtest.tradeListData\n  function finalizeTrade(myBag, buyDate, sellDate, candleCountSell, sellPrice, curIndicatorValue, numShares) {\n    const percentChange = (sellPrice/myBag[\"buy-price\"]);\n    const profitUSD = +(percentChange-1)*myBag[\"volume-USD\"];\n    const candleLength = +candleCountSell-myBag[\"candle-count-buy\"];\n    \n    // Push on individual trade data\n    (backtest.tradeListData).push({\n      buyDate,\n      sellDate,\n      buyPrice: myBag[\"buy-price\"],\n      sellPrice,\n      numShares,\n      profitPercent: +percentChange-1,\n      profitUSD,\n      candleLength,\n      indicatorAtSell: curIndicatorValue,\n      indicatorAtBuy: myBag[\"indicator-at-buy\"]\n    });\n\n    // Update results Overview data\n    backtest.numTrades++;\n    backtest.profitUSD += profitUSD;\n    backtest.netBars += candleLength;\n    backtest.netSellVolume += sellPrice * numShares;\n\n    //console.log(\"finalizeTrade called, % change:\", percentChange, buyDate, sellDate);\n  }\n\n  // Runs user specified backtest algorithms and prepares outputs/trades to display\n  async function runBacktests(paperAPICall, pairSettings) {\n    let stockPriceData;\n    let stockIndicatorData;\n    let response;\n\n    // Ensure user has selected a stock\n    if(!current_symbol){\n      alert(\"Please select a stock to test your strategy on.\");\n      return;\n    }\n    \n    // Ensure API json for cache_TSDA exists\n    if(!cache_TSDA['Meta Data']){\n      response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${current_symbol}&outputsize=full&apikey=CQ5JZQYM4DG0OODA`);\n      stockPriceData = await response.json();\n      cache_TSDA_function(stockPriceData);\n\n      // Stop if MAX API\n      if(stockPriceData.Note) return;\n    }else{\n      stockPriceData = cache_TSDA;\n    }\n\n    // Make API call for stockIndicatorData\n    let optionalParameters;\n    switch(backtest.indicator){\n      case 'BBANDS':\n        optionalParameters = `&nbdevup=${pairSettings.stdDeviation}&nbdevdn=${pairSettings.stdDeviation}`;\n        break;\n      default:\n        optionalParameters = '';\n    }\n    response = await fetch(`https://www.alphavantage.co/query?function=${backtest.indicator}&symbol=${current_symbol}&interval=daily&time_period=${paperAPICall.timePeriod}&series_type=${paperAPICall.seriesType}${optionalParameters}&apikey=CQ5JZQYM4DG0OODA`);\n    stockIndicatorData = await response.json();\n    backtest.didRun = true;\n\n    // Catches MAX API\n    if(stockIndicatorData.Note){\n      alert(\"MAX API CALLS. Please wait a minute for more. Thank you for visitng my project! However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n      backtest.didRun = false;\n      return;\n    }\n\n    // Initalize bags/candle-count/currentBalance\n    let candleCount = 0;\n    let bagList = {};\n    bagList.length = 0;\n    let currentBalance = pairSettings.initalBalance;\n    let startDateReached = false;\n    // Initalize single integer to know lowest price I consider selling at(updated when new bags are added)\n    let lowestSellPrice = 0;\n    // Main loop that runs the paper trading bot algo, maintains bags/buys/sells/etc throughout 5 years (1265 trading days)\n    // Note: in the following for loop: key == date\n    for(let [key] of Object.entries(stockIndicatorData[`Technical Analysis: ${backtest.indicator}`]).reverse()){\n      // Enables iterator code to run once start date reached/passed\n      if(key>=startDate){\n        startDateReached = true;\n      }\n      // Skips iterator because start date not reached\n      if(startDateReached === false){\n        continue;\n      }else if(key===endDate){\n        // End date reached... so stop iterating.\n        break;\n      }\n      // Count Candles interated over\n      candleCount++;\n      \n      // Skip days where no price exists\n      if(!stockPriceData[\"Time Series (Daily)\"][`${key}`]) continue;\n      // Essential values for iterating stock data\n      let curIndicatorValue = +stockIndicatorData[`Technical Analysis: ${backtest.indicator}`][`${key}`][`${getIndicatorJSON()}`];\n      let curStockPrice = +stockPriceData[\"Time Series (Daily)\"][`${key}`][`${paperAPICall.seriesType}`];\n\n      // First price of start date\n      if(!backtest.startPrice){\n        backtest.startPrice = curStockPrice;\n      }\n      // Maintain oldest price\n      backtest.endPrice = curStockPrice;    \n\n      // Prospective USD to create a new bag\n      const newBagVolume = calcInitalBuy(pairSettings.initalBuyType, pairSettings.initalBuyAmount, currentBalance, curStockPrice);\n\n      // If Buy condition: Bags open, balance sufficient, price meets indicator limit\n      if(bagList.length<pairSettings.maxBags && newBagVolume <= currentBalance && isBuyConditionMet(pairSettings.buyStrategyValue, curStockPrice, curIndicatorValue)){\n        // Create and add bag to bagList, increment bagList.length. Automatically added by creating key.\n        bagList.length++;\n        console.log(\"bag added\", bagList);\n        bagList[`${key}`] = {\n          \"sell-price-limit\": +(1+(pairSettings.sellStrategyValue/100)) * curStockPrice,\n          \"buy-price\": +curStockPrice,\n          \"candle-count-buy\": +candleCount,\n          \"volume-USD\": +newBagVolume,\n          \"num-shares\": +newBagVolume/curStockPrice,\n          \"indicator-at-buy\": curIndicatorValue\n        }\n\n        // Update currentBalance\n        currentBalance -= bagList[`${key}`][\"volume-USD\"];\n\n        // Update lowestSellPrice, min of current lowest, or new buy price is lower. Initialize if only 1 bag.\n        if(bagList.length===1){\n          lowestSellPrice = +bagList[`${key}`][\"sell-price-limit\"];\n        }else{\n          lowestSellPrice = Math.min(lowestSellPrice, bagList[`${key}`][\"sell-price-limit\"]);\n        }\n      // Else If Sell Condition\n      }else if(curStockPrice>= lowestSellPrice && bagList.length>0){\n        // Store key of buy date(below loop has new key in smaller scope)\n        let sellDate = key;\n        for(let [key] of Object.entries(bagList)){ \n          if(curStockPrice >= bagList[`${key}`][\"sell-price-limit\"]){\n            // Finalize Trade function records trade data into backtest to display in JSX below\n            finalizeTrade(bagList[`${key}`], key, sellDate, candleCount, curStockPrice, curIndicatorValue, bagList[`${key}`][\"num-shares\"], bagList[`${key}`][\"indicator-at-buy\"]);\n            delete bagList[`${key}`];\n            bagList.length--;\n          }\n        }\n\n        // If bags exist, update to new lowest price\n        const newBagListKeys = Object.entries(bagList);\n        if(newBagListKeys[0][1]>0){\n          lowestSellPrice = bagList[newBagListKeys[1][0]][\"sell-price-limit\"];\n          for(let [key] of newBagListKeys){ \n            lowestSellPrice = Math.min(lowestSellPrice, +bagList[`${key}`][\"sell-price-limit\"]);\n          }\n        }\n      }\n      // End of Buy/Sell conditions\n    }\n    \n    //console.log(\"iterating done\", backtest, startDate, endDate, backtest.holdReturn);\n    // Iterating complete, finalize some data on compelted backtest algorithm\n    backtest.holdReturn = (((backtest.endPrice / backtest.startPrice)-1) * 100).toFixed(2);\n    //console.log(\"set holdret\", backtest.holdReturn, \"end/start\", backtest.endPrice, backtest.startPrice);\n    delete backtest.startPrice;\n    backtest.profitPercentOnBalance = backtest.profitUSD / pairSettings.initalBalance;\n    backtest.profitPercentOnTrades = backtest.profitUSD / (backtest.netSellVolume - backtest.profitUSD);\n    backtest.avgBars = backtest.netBars / backtest.numTrades;\n    \n    // Update results display and sends tradeListData to TradeList.js in JSX below\n    setTradeListData(backtest.tradeListData);\n  }\n\n  // Turns JSX input type to date\n  const onFocus = e =>{\n    e.currentTarget.type = \"date\";\n  }\n\n  const onSubmit = () => {\n    backtest.current_symbol = current_symbol;\n\n    const paperAPICall = { \n      // Relavent variables that are global: current_symbol, interval(daily), backtest.indicator(ex, RSI)\n      seriesType: seriesType,\n      timePeriod: +timePeriod,\n      stdDeviation: +stdDeviation\n    };\n\n    // Trivial value, set to 2\n    if(paperAPICall.timePeriod===1){\n      paperAPICall.timePeriod = 2;\n    }\n\n    const pairSettings = {\n      maxBags: +maxBags,\n      initalBalance: +initalBalance,\n      initalBuyType: initalBuyType,\n      initalBuyAmount: +initalBuyAmount,\n      buyStrategyValue: +buyStrategyValue,\n      buyStrategyType, // used for Bollinger upper/middle/lower\n      sellStrategyValue: +sellStrategyValue\n    }\n\n    // Ensure no trivial strategies are submitted\n    if(pairSettings.maxBags<1 || pairSettings.initalBalance<1 || pairSettings.initalBuyAmount<1 || pairSettings.sellStrategyValue<0 || paperAPICall.timePeriod<1){\n      // Bags, balance, timeperiod, buy amount, sell gain% must be positive\n      alert(\"Please enter valid inputs. Use positive integers for the following: Max bags, Sell percentage, Time period, Buy amount, Inital Balance.\");\n    }else if(pairSettings.initalBuyType==='percent' && (pairSettings.initalBuyAmount<1 || pairSettings.initalBuyAmount>100)){\n      // if(buy type is percent) buy amount must be (0-100]\n      alert(\"Buy amount percentage must be 1-100%\");\n    }else if (pairSettings.initalBuyAmount>pairSettings.initalBalance){\n      // inital buy must be < inital balance\n      alert(\"Inital buys must be less than or equal to inital balance.\");\n    }else if(backtest.indicator==='RSI' && (pairSettings.buyStrategyValue<1 || pairSettings.buyStrategyValue>99)){\n      // Ensure no trivial strategy specific settings are submitted <connect to previous if chain thing>\n      alert(\"RSI values must be between 1-99\");\n    }else if(backtest.indicator==='BBANDS' && paperAPICall.stdDeviation<0.5){\n      // Ensure no trivial BB std deviation\n      alert(\"Standard Deviation must be greater than or equal to 0.5.\");\n    }else{\n      // Calculation inputs valid\n      //console.log(pairSettings);\n\n      // Initialize Trade List Data(for final results)\n      backtest.tradeListData = [];\n      backtest.profitUSD = 0;\n      backtest.numTrades = 0;\n      backtest.netBars = 0;\n      backtest.netSellVolume = 0; // Net volume USD sold\n\n      // Run backtest algorithm\n      runBacktests(paperAPICall, pairSettings);\n    }\n\n  }\n\n  let indicatorSettingDOM = null;\n  switch(backtest.indicator){\n    case 'RSI':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n          <label className=\"input-label\" data-tooltip=\"Number of prior days technical indicator is calculated from.\">Time Period (days):</label>\n          <input className=\"input-flex\" placeholder='14' onChange={(e) => setTimePeriod(e.target.value)} />\n      </>);\n      break;\n    case 'EMA':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label className=\"input-label\" data-tooltip=\"Number of prior days technical indicator is calculated from.\">Time Period (days): </label>\n        <input className=\"input-flex\" placeholder=\"9\" onChange={(e) => setTimePeriod(e.target.value)} />\n      </>);\n      break;\n    case 'SMA':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label className=\"input-label\" data-tooltip=\"Number of prior days technical indicator is calculated from.\">Time Period (days):</label>\n        <input className=\"input-flex\" placeholder=\"9\" onChange={(e) => setTimePeriod(e.target.value)} />\n      </>);\n      break;\n    case 'BBANDS':\n      indicatorSettingDOM = (<> \n        {/* Time Period(# candles in calc) */}\n        <label className=\"input-label\" data-tooltip=\"Number of prior days technical indicator is calculated from.\">Time Period (days): </label>\n        <input className=\"input-flex\" placeholder=\"20\" onChange={(e) => setTimePeriod(e.target.value)} />\n\n        {/* Standard deviation for both top/bot lines */}\n        <label className=\"input-label\" data-tooltip=\"Standard devation for calculating upper and lower bollinger bands.\">Standard Deviation for upper/lower lines:</label>\n        <input className=\"input-flex\" placeholder=\"2\" onChange={(e) => setStdDeviation(e.target.value)} />\n      </>);\n      break;\n    default:\n      indicatorSettingDOM = (<div>Default backtest indicator DOM</div>);\n    \n  }\n\n  let buyStrategyDOM = null;\n  switch(backtest.indicator){\n    case 'RSI':\n      buyStrategyDOM = (<> \n        {/* Buy Strategy RSI */}\n        <label className=\"input-label\" data-tooltip=\"Open a position on stock for this condition.\">Buy when RSI less than</label>\n        <input className=\"input-inline\" placeholder='30' onChange={(e) => setBuyStrategyValue(e.target.value)} />\n        <br/>\n      </>);\n      break;\n    case 'EMA':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away */}\n        <label className=\"input-label\" data-tooltip=\"Open a position on stock for this condition.\">Buy at price</label>\n        <input className=\"input-inline\" placeholder=\"-3\" onChange={(e) => setBuyStrategyValue(e.target.value)}/>\n        <label className=\"input-label\" data-tooltip=\"Open a position on stock for this condition.\">% away from the EMA line. </label>\n        <label className=\"input-label-sub\" data-tooltip=\"Positive values will open a position when the stock price is X% above the indicator value. Negative values will open a position when the stock price is X% below the indicator value.\">(3 = 3% above, -3 = 3% below)</label>\n        <br/>\n      </>);\n      break;\n    case 'SMA':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away */}\n        <label className=\"input-label\" data-tooltip=\"Open a position on stock for this condition.\">Buy at price</label>\n        <input className=\"input-inline\" placeholder=\"-3\" onChange={(e) => setBuyStrategyValue(e.target.value)}/>\n        <label className=\"input-label\" data-tooltip=\"Open a position on stock for this condition.\">% away from the SMA line. </label>\n        <label className=\"input-label-sub\" data-tooltip=\"Positive values will open a position when the stock price is X% above the indicator value. Negative values will open a position when the stock price is X% below the indicator value.\">(3 = 3% above, -3 = 3% below)</label>\n        <br/>\n      </>);\n      break;\n    case 'BBANDS':\n      buyStrategyDOM = (<> \n        {/* Buy strategy % away (BB) */}\n        <label className=\"input-label\" data-tooltip=\"Select bollinger band the backtest will track to open and close positions.\">Band to follow:</label>\n        <select className=\"input-select\" onChange={(e) => setBuyStrategyType(e.target.value)}>\n          {dropdownItems([\n            {name:'Middle', value:'Real Middle Band'},\n            {name:'Upper', value:'Real Upper Band'},\n            {name:'Lower', value:'Real Lower Band'}\n          ])}\n        </select>\n        \n        <label className=\"input-label\" data-tooltip=\"Open a position on stock for this condition.\">Buy at price</label>\n        <input className=\"input-inline\" placeholder=\"-3\" onChange={(e) => setBuyStrategyValue(e.target.value)}/>\n        <label className=\"input-label\" data-tooltip=\"Open a position on stock for this condition.\">% away from the selected line. </label>\n        <label className=\"input-label-sub\" data-tooltip=\"Positive values will open a position when the stock price is X% above the indicator value. Negative values will open a position when the stock price is X% below the indicator value.\">(3 = 3% above, -3 = 3% below)</label>\n        <br/>\n      </>);\n      break;\n    default:\n      buyStrategyDOM = (<div>buy strat dom default</div>);\n    \n  }\n\n  // Immediately Calculates backtest results (for 'See Example' button on homepage)\n  if(backtest.immediatelyCalculate){\n    onSubmit();\n    backtest.immediatelyCalculate = false;\n  }\n\n  return (\n    <CSS>\n      <div className='settings'>\n        {/* Beginning of Settings */}\n        <h4 data-tooltip=\"Settings for calculating technical indicator.\">{backtest.indicator} Settings</h4>\n\n        {/* series type */}\n        <label className=\"input-label\" data-tooltip=\"Indicator calculated from open, high, low, or closing prices for each period.\">Select Series Type:</label>\n        <select className=\"input-select\" onChange={(e) => setSeriesType(e.target.value)}>\n          {dropdownItems([\n            {name:'open', value:'1. open'},\n            {name:'close', value:'4. close'},\n            {name:'high', value:'2. high'},\n            {name:'low', value:'3. low'}])}\n        </select>\n        \n        {indicatorSettingDOM}\n\n        <br/>\n\n        <h4 data-tooltip=\"Settings for calculating buy/sell conditions.\">Trading Strategy Settings</h4>\n\n        {/* Begin date for backtest */}\n        <label className=\"input-label\" data-tooltip=\"Date for the backtest to begin. Leave blank for earliest date.\">Start Date:</label>\n        <input className=\"input-flex\" type=\"text\" placeholder=\"IPO date (earliest)\" onFocus={(e) => onFocus(e)} onChange={(e) => setStartDate(e.target.value)}/>\n              \n\n        {/* End date for backtest */}\n        <label className=\"input-label\" data-tooltip=\"Date for the backtest to end. Leave blank for today's date.\">End Date:</label>\n        <input className=\"input-flex\" type=\"text\" placeholder={formatDate(getTodayDate())} onFocus={(e) => onFocus(e)} onChange={(e) => setEndDate(e.target.value)}/>\n              \n        {/* Max number bags */}\n        <label className=\"input-label\" data-tooltip=\"Max number of positions to have at a given time. Algorithm will not add new positions that would exceed this value.\">Max number of positions:</label>\n        <input className=\"input-flex\" placeholder=\"15\" onChange={(e) => setMaxBags(e.target.value)} />\n\n        {/* Inital balance */}\n        <label className=\"input-label\" data-tooltip=\"Inital balance for backtest algorithm to start trading with.\">Inital balance (USD):</label>\n        <input className=\"input-flex\" min=\"0\" placeholder=\"3000\" onChange={(e) => setInitialBalance(e.target.value)} />\n\n        {/* Inital buy (type/amount) */}\n        <label className=\"input-label\" data-tooltip=\"Volume of new positions will be opened in reference to this type of value.\">Inital buy type:</label>\n        <select className=\"input-select\" onChange={(e) => setInitalBuyType(e.target.value)}>\n          {dropdownItems([\n            {name:'($) USD', value:'usd'},\n            {name:'(%) Percent of Balance', value:'percent'},\n            {name:'(#) Number of Stocks', value:'numStocks'}\n          ])}\n        </select>\n\n        <label className=\"input-label\" data-tooltip=\"Value for new positions to begin with.\">Inital buy amount:</label>\n        <input className=\"input-flex\" min=\"0\" placeholder=\"100\" onChange={(e) => setInitalBuyAmount(e.target.value)} />\n\n        {buyStrategyDOM}\n\n        {/* Sell Strategy */}\n        <label className=\"input-label\" data-tooltip=\"Close positions when profit meets or exceeds this value.\">Sell position at</label>\n        <input className=\"input-inline\" placeholder=\"1\" onChange={(e) => setSellStrategyValue(e.target.value)} />\n        <label className=\"input-label\" data-tooltip=\"Close positions when profit meets or exceeds this value.\">% profit.</label>\n        <br/>\n\n        {/* submit button */}\n        <button className=\"calc-button\" onClick={() => onSubmit()}>Calculate</button>\n\n\n        {/* close button */}\n        <button className=\"del-button\" onClick={() => deleteBacktest(backtest.id)} >Delete</button>\n      </div>\n      {/* end of settings, beginning of results overview */}\n\n      <div className='results-overview'>\n        <h4 data-tooltip=\"Results of backtest.\">Performance Overview {backtest.current_symbol?\"(\"+backtest.current_symbol+\")\":\"\"}</h4>\n        <div className=\"result-item\">\n          <label className=\"result-title\" data-tooltip=\"Total profit of backtest in USD.\">Profit USD:</label>\n          <label className=\"result-output\">${(backtest.profitUSD?backtest.profitUSD:0).toFixed(2)}</label>\n        </div>\n        <div className=\"result-item\">\n          <label className=\"result-title\" data-tooltip=\"Total profit of backtest in percent.\">Profit Percent on Entire Balance: </label>\n          <label className=\"result-output\">{(backtest.profitPercentOnBalance ? 100*backtest.profitPercentOnBalance : 0).toFixed(2)}%</label>\n        </div>\n        <div className=\"result-item\">\n          <label className=\"result-title\" data-tooltip=\"Average profit of trades from running backtest.\">Average profit per trade: </label>\n          <label className=\"result-output\"> {(backtest.profitPercentOnTrades?100*backtest.profitPercentOnTrades:0).toFixed(2)}%</label>\n        </div>\n        <div className=\"result-item\">\n          <label className=\"result-title\" data-tooltip=\"Number of trades made by backtest.\">Number of trades: </label>\n          <label className=\"result-output\">{backtest.numTrades? backtest.numTrades:0}</label>\n        </div>\n        <div className=\"result-item\">\n          <label className=\"result-title\" data-tooltip=\"Average number of candles/days between opening and closing each position.\">Average bars per trade: </label>\n          <label className=\"result-output\">{(backtest.avgBars?backtest.avgBars:0).toFixed(2)}</label>\n        </div>\n        <div className=\"result-item\">\n          <label className=\"result-title\" data-tooltip=\"Return if inital balance had been fully invested at the start date and cashed out at the end date. (instead of running algorithm)\">Buy and hold return: </label>\n          <label className=\"result-output\">{backtest.holdReturn>0?\"+\":\"\"}{backtest.holdReturn?backtest.holdReturn:\"0\"}%</label>\n        </div>\n        <div className=\"result-item\">\n          <label className=\"conclusion-title\">Backtest Conclusion: </label>\n          {backtest.didRun?\n            backtest.profitPercentOnBalance>backtest.holdReturn?\n              <label className=\"backtest-won\"> This algorithm is more profitable than buy and holding {backtest.current_symbol}. </label>\n              :\n              <label className=\"backtest-lost\"> Buy and holding {backtest.current_symbol} is more profitable than this algorithm. </label>\n            :\n            <label className=\"backtest-null\">No trades made</label>\n          }\n        </div>\n          \n      </div>\n      \n      {/* End of results overview, begin list of trades */}\n\n      <div className='list-of-trades'>\n        <h4 data-tooltip=\"History of positions opened/closed by backtest.\">List Of Trades</h4>\n        <div className=\"trades-scroll\">\n          <TradeList tradeList={tradeListData.map(tradeData => tradeData)}/>\n        </div>\n      </div>\n      \n      {/* End list of trades */}\n    </CSS>\n  );\n}\n","import React, {useContext} from 'react';\nimport styled from \"styled-components\";\nimport {v1 as uuid} from \"uuid\"; \nimport { GlobalContext } from '../context/GlobalState';\n\nconst CSS = styled.div`\n  .main-box{\n    color: #898996;\n    display:flex;\n\n    padding: 5%;\n    margin: 0%;\n    padding-top: 140px;\n\n    .intro-text{  \n      padding-top: 8%;\n      text-align: center;\n      .intro-text-p{\n        color: #898996;\n        font-size: 22px;\n      }\n      h4{\n        font-size: 30px;\n        color: #dedfe4;\n      }\n    }\n\n    .howto-text{  \n      padding-top: 4%;\n      width: 50%;\n      text-align: center;\n      p{\n        color: #898996;\n        font-size: 16px;\n      }\n      h4{\n        font-size: 180%;\n        color: #dedfe4;\n      }\n    }\n    .img-chart{\n      z-index:0;\n      width: 50%;\n      transform: perspective(700px) rotateY(-10deg);\n      box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;\n    }\n    .img-backtest{\n\n      z-index:0;\n      width: 50%;\n      transform: perspective(700px) rotateY(10deg);\n      box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;\n    }\n\n  }\n\n  //Try it button CSS\n  \n.share-button {\n  width: 280px;\n  height: 40px;\n\n  color: #373641;\n  background: #dedfe4;\n\n  border-radius: 7px;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  //padding: 0 50px;\n  overflow: hidden;\n  position: relative;\n  cursor: pointer;\n  margin: auto;\n  transition: .3s linear;\n  box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;\n}\n.share-button:hover{\n  transform: scale(1.1);\n}\n.share-button span{\n  position: absolute;\n  width: 100%;\n  height: 100%;\n\n  background: #898996;\n  color: #3d3d4a;\n  padding-top: 5px;\n  font-size: 20px;\n\n  text-align: center;\n  z-index: 1;\n  transition: .2s linear;\n  border-radius: 7px;\n \n}\n.share-button:focus span{\n  transform: translateX(-100%);\n  transition-delay: .3s;\n}\n.share-button-p{\n  padding-top: 16px;\n  font-size: 16px;\n}\n\n\n`;\n\nexport const Homepage = () => {\n  const { addBacktest } = useContext(GlobalContext);\n  const { graphSymbol } = useContext(GlobalContext);\n\n\n  return (\n    <CSS>\n      <div className=\"main-box\"> \n        <div className=\"intro-text\">\n          <h4>AlgoTrade</h4>\n          <p className=\"intro-text-p\">\n            Simple, yet powerful tool to run backtests for algorithmic trading strategies and to visualize stock market data.\n          </p>\n          {/** This button will graph SPY and run a BB backtest */}\n          \n          \n        </div>\n        <img className=\"img-chart\" src=\"chart-img.png\" alt=\"\"/>\n      </div>\n      <div className=\"main-box\"> \n        <img className=\"img-backtest\" src=\"backtest-img.png\" alt=\"\"/>\n        <div className=\"howto-text\">\n          <h4>How Does it Work?</h4>\n          <p>\n            <br/>\n            Search a US listed stock ticker and select a company to visualize their historic stock market data on an \n            interactive candlestick chart.\n            <br/><br/>\n            Select a{\" \"}\n            <a className=\"\" href=\"https://www.investopedia.com/terms/t/technicalindicator.asp\" rel=\"noreferrer\" target=\"_blank\">technical indicator</a> \n            {\" \"}to create a customizable{\" \"}\n            <a className=\"\" href=\"https://www.investopedia.com/terms/b/backtesting.asp\" rel=\"noreferrer\" target=\"_blank\">backtest</a> \n            {\" \"}to visualize the results of your strategy. \n            <br/><br/>\n            Create multiple {\" \"}\n            <a className=\"\" href=\"https://www.investopedia.com/terms/b/backtesting.asp\" rel=\"noreferrer\" target=\"_blank\">backtests</a>  \n            {\" \"}and compare your algorithms using different indicators across different stocks.\n          </p>\n        </div>\n      </div>\n    </CSS>\n  )\n}\n","import React, { useContext } from 'react';\nimport styled from \"styled-components\";\nimport { Backtest } from './Backtest';\nimport { Homepage } from './Homepage';\nimport { GlobalContext } from '../context/GlobalState';\n\nconst CSS = styled.div`\n  margin: 0% 3% 0% 3%;\n  padding: 1%;\n\n  background: #373641;\n  border-radius: 10px;\n\n  h3{\n    font-family: 'Lato', sans-serif; \n    font-size: 28px; \n    font-weight: 300; \n    text-align: left;\n    color: #dedfe4;\n  }\n\n`;\n\nexport const BacktestList = () => {\n  const { backtests, current_symbol } = useContext(GlobalContext);\n\n\n  if(current_symbol.length>0){\n    return (\n      <>\n        {backtests.length>0?\n          <CSS>\n            <h3>Backtest Strategy Testing</h3>\n            {backtests.map(backtest => (<Backtest key={backtest.id} backtest={backtest} />))}\n          </CSS>\n        :\n          <></>\n        }\n        \n\n        <Homepage/>\n      </>\n      )\n    }else{\n      return (\n        <Homepage/>\n      )\n    }\n}\n","import React, {useContext} from 'react';\nimport styled from \"styled-components\";\nimport {v1 as uuid} from \"uuid\"; \nimport { GlobalContext } from '../context/GlobalState';\n\n\nconst CSS = styled.div`\n  margin: 3% 3% 0% 3%;\n  padding: 1%;\n\n  h3{\n    font-family: 'Lato', sans-serif; \n    font-size: 28px; \n    font-weight: 300; \n    text-align: left;\n    color: #dedfe4;\n  }\n  \n  .btn {\n    font-size: 80%;\n    font-family: 'Lato', sans-serif; \n    text-align: center;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    color: white;\n    width: 300px;\n    height: 70px;\n    padding: none;\n    margin: 1%;\n    padding: 0% 1%;\n    transition: all 0.3s;\n    span {\n      transition: all 0.3s;\n      tranform: scale(1, 1);\n    }\n  }\n    \n  .btn::before, .btn::after {\n    content: '';\n    position: absolute;\n    transition: all 0.3s;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n  }\n\n  .btn-one::before {\n    left: 4px;\n    z-index: 1;\n    \n    opacity: 0;\n    background: rgba(255, 255, 255, 0.1);\n    transform: scale(0.1, 1);\n  }\n\n  .btn-one:hover::before {\n    opacity: 1;\n    transform: scale(1, 1);\n  }\n\n  .btn-one::after {\n    transition: all 0.3s;\n    border: 1px solid rgba(255, 255, 255, 0.5);\n  }\n\n  .btn-one:hover::after {\n    transform: scale(1, .1);\n    opacity: 0;\n  }\n  .btn-text{\n    width:90%;\n    color: #dedfe4;\n    display:inline;\n  }\n  .plus-icon{\n    filter: invert(1);\n    width: 8%;\n    vertical-align: -30%;\n    margin-right: 3%;\n  }\n\n  background: #373641;\n  border-radius: 10px;\n\n  /* Tooltips */\n\n  [data-tooltip] {\n    position: relative;\n    z-index: 10;\n  }\n  \n  /* Positioning and visibility settings of the tooltip */\n  [data-tooltip]:before,\n  [data-tooltip]:after {\n    position: absolute;\n    visibility: hidden;\n    opacity: 0;\n    left: 50%;\n    bottom: calc(100% + 5px); /* 5px is the size of the arrow */\n    pointer-events: none;\n    transition: 0.2s;\n    will-change: transform;\n  }\n  \n  /* The actual tooltip with a dynamic width */\n  [data-tooltip]:before {\n    content: attr(data-tooltip);\n    padding: 10px 18px;\n    min-width: 50px;\n    max-width: 300px;\n    width: max-content;\n    width: -moz-max-content;\n    border-radius: 6px;\n    font-size: 14px;\n    background-color: rgba(59, 72, 80, 0.9);\n    background-image: linear-gradient(30deg,\n      rgba(59, 72, 80, 0.44),\n      rgba(59, 68, 75, 0.44),\n      rgba(60, 82, 88, 0.44));\n    box-shadow: 0px 0px 24px rgba(0, 0, 0, 0.2);\n    color: #fff;\n    text-align: center;\n    white-space: pre-wrap;\n    transform: translate(-50%, -5px) scale(0.5);\n  }\n  \n  /* Tooltip arrow */\n  [data-tooltip]:after {\n    content: '';\n    border-style: solid;\n    border-width: 5px 5px 0px 5px; /* CSS triangle */\n    border-color: rgba(55, 64, 70, 0.9) transparent transparent transparent;\n    transition-duration: 0s; /* If the mouse leaves the element, \n                                the transition effects for the \n                                tooltip arrow are \"turned off\" */\n    transform-origin: top;   /* Orientation setting for the\n                                slide-down effect */\n    transform: translateX(-50%) scaleY(0);\n  }\n  \n  /* Tooltip becomes visible at hover */\n  [data-tooltip]:hover:before,\n  [data-tooltip]:hover:after {\n    visibility: visible;\n    opacity: 1;\n  }\n  /* Scales from 0.5 to 1 -> grow effect */\n  [data-tooltip]:hover:before {\n    transition-delay: 0.3s;\n    transform: translate(-50%, -5px) scale(1);\n  }\n  /* \n    Arrow slide down effect only on mouseenter (NOT on mouseleave)\n  */\n  [data-tooltip]:hover:after {\n    transition-delay: 0.5s; /* Starting after the grow effect */\n    transition-duration: 0.2s;\n    transform: translateX(-50%) scaleY(1);\n  }\n  /* End of tooltips*/\n`;\n\nexport const AddBacktest = () => {\n  const { addBacktest, current_symbol } = useContext(GlobalContext);\n\n  const onSubmit = (indicator) => {\n    const newBacktest = {\n      id: uuid(),\n      indicator\n    }\n    addBacktest(newBacktest);\n  }\n\n\n  if(current_symbol.length>0){\n    return (\n      <CSS>\n        <h3>Select Technical Indicator(s)</h3>\n        <button className=\"btn btn-one\" onClick={() => onSubmit('RSI')}>\n          <img className=\"plus-icon\" src=\"https://img.icons8.com/android/24/000000/plus.png\" alt=\"\"/>\n          <div className=\"btn-text\" data-tooltip=\"The relative strength index (RSI) is a momentum indicator used to evaluate overbought or oversold conditions. The RSI is displayed as an oscillator and can have a reading from 0 to 100.\">Relative Strength Index (RSI)</div>\n        </button>\n        <button className=\"btn btn-one\" onClick={() => onSubmit('EMA')}>\n          <img className=\"plus-icon\" src=\"https://img.icons8.com/android/24/000000/plus.png\" alt=\"\"/>\n          <div className=\"btn-text\" data-tooltip=\"The expnential moving average (EMA) is a moving average that places a greater weight and significance on the most recent data points.\">Exponential Moving Average (EMA)</div>\n        </button>\n        <button className=\"btn btn-one\" onClick={() => onSubmit('SMA')}>\n          <img className=\"plus-icon\" src=\"https://img.icons8.com/android/24/000000/plus.png\" alt=\"\"/>\n          <div className=\"btn-text\" data-tooltip=\"The simple moving average (SMA) calculates the average of a selected range of prices by the number of periods in that range.\">Simple Moving Average (SMA)</div>\n        </button>\n        <button className=\"btn btn-one\" onClick={() => onSubmit('BBANDS')}>\n          <img className=\"plus-icon\" src=\"https://img.icons8.com/android/24/000000/plus.png\" alt=\"\"/>\n          <div className=\"btn-text\" data-tooltip=\"The Bollinger Bands are defined by a set of trendlines plotted two standard deviations (positively and negatively) away from a simple moving average (SMA) of a security's price, which can be adjusted to user preferences.\">Bollinger Bands (BB)</div>\n        </button>\n      </CSS>\n      )\n    }else{\n      return (\n        <>\n        {/** make a <about> element that  */}\n        </>\n      )\n    }\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nconst Candle = props => {\n  const { data, x, candle_width, pixelFor } = props;\n\n  const up = data.close > data.open;\n  const bar_top = pixelFor(up ? data.close : data.open);\n  const bar_bottom = pixelFor(up ? data.open : data.close);\n  const bar_height = bar_bottom - bar_top;\n  const wick_top = pixelFor(data.high);\n  const wick_bottom = pixelFor(data.low);\n  return (\n    <>\n      <rect\n        x={x - candle_width / 2}\n        y={bar_top}\n        width={candle_width}\n        height={data.open===data.close? 1 :Math.abs(bar_height)}\n        className={classNames({\n          candle: true,\n          up: up,\n          down: !up\n        })}\n      />\n      <line\n        className={classNames({\n          wick: true,\n          top: true,\n          up: up,\n          down: !up\n        })}\n        x1={x}\n        y1={bar_top}\n        x2={x}\n        y2={wick_top}\n      />\n      <line\n        className={classNames({\n          wick: true,\n          bottom: true,\n          up: up,\n          down: !up\n        })}\n        x1={x}\n        y1={bar_bottom}\n        x2={x}\n        y2={wick_bottom}\n      />\n    </>\n  );\n};\n\nexport default Candle;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nconst CrossHairs = props => {\n  const { x, y, chart_dims } = props;\n\n  if (x + y === 0) {\n    return <></>;\n  }\n\n  return (\n    <>\n      <line\n        x1={0}\n        y1={y}\n        x2={chart_dims.pixel_width * 1.025}\n        y2={y}\n        className={classNames({\n          cross_hair: true,\n          horz: true\n        })}\n      />\n      <line\n        x1={x}\n        y1={0}\n        x2={x}\n        y2={chart_dims.pixel_height}\n        className={classNames({\n          cross_hair: true,\n          vert: true\n        })}\n      />\n    </>\n  );\n};\n\nexport default CrossHairs;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Candle from \"./Candle\";\nimport CrossHairs from \"./CrossHairs\";\n\nconst CSS = styled.div`\n  .caret{\n    font-size: 65%;\n  }\n\n  .priceChanges{\n    font-size: 80%;\n  }\n`;\n\nconst Chart = props => {\n  const { data, graph_type, width: chart_width, height: chart_height } = props;\n  // let { last_bar_idx = 0, bars_wide = 40 } = props;\n\n  // last_bar_idx should default to the last bar in the data, or else be sure passed-in value doesn't exceed the last bar\n  // last_bar_idx = last_bar_idx > 0 ? Math.min(last_bar_idx, data.length - 1) : data.length - 1;\n\n  const [mouseCoords, setMouseCoords] = useState({\n    x: -50,\n    y: -50\n  });\n\n  // let mouseCoords = {\n  //   x: 0,\n  //   y: 0\n  // };\n\n  // const setMouseCoords = (x, y) => {\n  //   mouseCoords = { x, y };\n  // };\n\n  // find the high and low bounds of all the bars being sidplayed\n  const dollar_high = Math.max.apply(Math, data.map(bar => +bar.high)) * 1.15;\n  const dollar_low = Math.min.apply(Math, data.map(bar => +bar.low)) * 0.95 ;\n\n  // calculate the candle width\n  const candle_width = Math.floor((chart_width / data.length) * 0.7);\n\n  const chart_dims = {\n    pixel_width: chart_width,\n    pixel_height: chart_height,\n    dollar_high,\n    dollar_low,\n    dollar_delta: dollar_high - dollar_low\n  };\n\n  // toFixed rounds number to 2 decimal places\n  const dollarAt = pixel => {\n    const dollar =\n      (Math.abs(pixel - chart_dims.pixel_height) / chart_dims.pixel_height) *\n        chart_dims.dollar_delta +\n      chart_dims.dollar_low;\n\n    return pixel > 0 ? dollar.toFixed(2) : \"-\";\n  };\n\n  // Gets candlestick data at x position\n  const candleDataAt = pixel => {\n    if(pixel<=0 || pixel >= chart_dims.pixel_width) return \"-\";\n    const candle = data[Math.floor((pixel/ chart_dims.pixel_width) * data.length)];\n\n    return candle;\n  };\n\n  const convertDate = dateString => {\n    if(!dateString) return \"\";\n    const myYear = dateString.substring(2,4);\n    const myMonth = parseInt(dateString.substring(5,7), 10);\n    const myDay = parseInt(dateString.substring(8,10), 10);\n    if(dateString.length===10){\n      return myMonth + \"/\" + myDay + \"/\" + myYear;\n    }\n    const myHour = parseInt(dateString.substring(11,13), 10);\n    const myMinute = dateString.substring(14,16);\n\n    return myMonth + \"/\" + myDay + \"/\" + myYear + \" \" + myHour + \":\" + myMinute + \" EST\";\n  }\n\n  const candleChange = pixel => {\n    if(pixel<=0 || pixel >= chart_dims.pixel_width) return \"\";\n    const candle = data[Math.floor(  (pixel/ chart_dims.pixel_width) * (data.length) )];\n    const change = ((candle['close']/candle['open'])-1) * 100;\n    const posNeg = change >= 0 ? '+' : '-';\n    return posNeg + Math.abs(change).toFixed(2);\n  };\n\n  const pixelFor = dollar => {\n    return -1*(\n      ((dollar - chart_dims[\"dollar_low\"]) / chart_dims[\"dollar_delta\"]) *\n        chart_dims[\"pixel_height\"] -\n        chart_dims[\"pixel_height\"]\n    );\n  };\n\n  const onMouseLeave = () => {\n    setMouseCoords({\n      x: -50,\n      y: -50\n    });\n  };\n\n  const onMouseMoveInside = e => {\n    //for date(x axis), calc using dates[x cord/width] , create dates[]\n    setMouseCoords({\n      x:\n        e.nativeEvent.x -\n        Math.round(e.currentTarget.getBoundingClientRect().left) - candle_width/2,\n      y:\n        e.nativeEvent.y -\n        Math.round(e.currentTarget.getBoundingClientRect().top)\n    });\n  };\n\n  const onMouseClickInside = e => {\n    console.log(`Click at ${e.nativeEvent.offsetX}, ${e.nativeEvent.offsetY}`);\n  };\n\n  // Returns string for mouse off chart display\n  const graphTypeStr = () => {\n    switch(graph_type){\n      case 'day':\n        return \"Yesterday\";\n      case 'week':\n        return \"Past Week\";\n      case 'month':\n        return \"Past Month\";\n      case 'quarter':\n        return \"Past 3 Months\";\n      case 'year':\n        return \"Past Year\";\n      default:\n        return \"Error chart.js\";\n    }\n  };\n\n  // Return JSX for mouse off chart display\n  const mouseOffChartJSX = () => {\n    if(data.length<3) return <></>;\n    const englishStr = <tspan fill='#898996'>{graphTypeStr()}</tspan>;\n    const changePercent = ((data[data.length-1][\"close\"] / data[0][\"open\"]) - 1) * 100 ;\n    const changeUSD = data[data.length-1][\"close\"] - data[0][\"open\"];\n    return <>\n      <tspan className=\"\" fill=\"#dedfe4\">${data[data.length-1][\"close\"]} </tspan>\n      <tspan className=\"caret\" fill={changeUSD>=0?\"#81dfc4\":\"#d75b6d\"}>{changeUSD>=0?\"▲\":\"▼\"} </tspan>\n      <tspan className=\"priceChanges\" fill={changeUSD>=0?\"#81dfc4\":\"#d75b6d\"}> ${Math.abs(changeUSD).toFixed(2)} ({changePercent.toFixed(2)}%) </tspan>\n      {englishStr}\n    </>;\n  }\n\n  return (\n    <CSS>\n    <svg\n      width={chart_width*1.025 /* Extra width to fit price */}\n      height={chart_height}\n      className=\"chart\"\n      onMouseMove={onMouseMoveInside}\n      onClick={onMouseClickInside}\n      onMouseLeave={onMouseLeave}\n    >\n      {data.map((bar, i) => {\n        const candle_x = (chart_width / (data.length)) * (i + 1);\n        return (\n          <Candle\n            key={i}\n            data={bar}\n            x={candle_x}\n            candle_width={candle_width}\n            pixelFor={pixelFor}\n          />\n        );\n      })}\n\n      <CrossHairs x={mouseCoords.x + candle_width/2} y={mouseCoords.y} chart_dims={chart_dims} />\n      {mouseCoords.x>0 && mouseCoords.x<=chart_width? <> \n      {/* Price CrossHair */}\n      <rect x={(chart_width*1.025)-(1+dollarAt(mouseCoords.y).length)*8.2} y={mouseCoords.y-12} width={(1+dollarAt(mouseCoords.y).length)*8.2} height='24' fill=\"gray\" rx='9' ry='9'>{/* background color for price */}</rect>\n      <text x={5 + (chart_width*1.025)-(1+dollarAt(mouseCoords.y).length)*8} y={mouseCoords.y+5} fill=\"white\" fontSize=\"12\">\n        ${dollarAt(mouseCoords.y)}\n      </text>\n      {/* Open/High */}\n      <text x='16' y='20' fontSize=\"12\">\n        <tspan fill='#898996'>Open</tspan> <tspan fill='#dedfe4'>${candleDataAt(mouseCoords.x)['open']}  </tspan>\n        <tspan fill='#898996'>High</tspan> <tspan fill='#dedfe4'>${candleDataAt(mouseCoords.x)['high']}</tspan>\n      </text>\n      {/* Low/Close */}\n      <text x='16' y='40' fontSize=\"12\">\n        <tspan fill='#898996'>Close</tspan> <tspan fill='#dedfe4'>${candleDataAt(mouseCoords.x)['close']}  </tspan>\n        <tspan fill='#898996'>Low</tspan> <tspan fill='#dedfe4'>${candleDataAt(mouseCoords.x)['low']}</tspan>\n      </text>\n      {/* Volume/%change */}\n      <text x='16' y='59' fontSize=\"12\">\n        <tspan fill='#898996'>Volume</tspan> <tspan fill='#dedfe4'>{mouseCoords.x > 0 ?(candleDataAt(mouseCoords.x)['volume']/1000).toFixed(2) + 'K': ''}  </tspan>\n        <tspan fill='#898996'>Change</tspan> <tspan fill={candleChange(mouseCoords.x)>=0?\"#81dfc4\":\"#d75b6d\"}>{candleChange(mouseCoords.x)}%</tspan>\n      </text>\n      {/* Date Time */}\n      <text x=\"16\" y=\"85\" fill='#898996' fontSize='20'>\n        {convertDate(candleDataAt(mouseCoords.x)['xAxis'])} \n      </text>\n      </> : <text x='16' y='40' fontSize=\"25\">{mouseOffChartJSX()}</text>}\n      \n    </svg>\n    </CSS>\n  );\n};\n\nexport default Chart;\n","import React, { useContext, useEffect, useState } from 'react';\nimport Chart from \"./chart-components/Chart\";\nimport styled from \"styled-components\";\n\nimport { GlobalContext } from '../context/GlobalState';\nimport \"../chart.css\";\n\nconst CSS = styled.div`\n\n  .chart-info-area{\n    margin: 0 16% 0 16%;\n    padding-top: 120px;\n  }\n\n  .stock-info{\n    display: flex;\n    align-items: center;\n    width: 110.5%;\n    margin: 2% -5%;\n    padding: 20px 50px 0px 50px;\n    color: #dedfe4;\n    background-color: transparent;//#2e4033;\n    border-radius: 10px;\n    font-family: 'Source Sans Pro', arial, sans-serif;\n    font-size: 16px;\n    font-weight: 200;\n    box-shadow: rgba(0, 0, 0, 0.4) 0px 5px 15px;\n\n    \n    @media only screen and (max-width: 768px) {\n      padding: 2%;\n      font-size: 75%;\n    }\n\n    &-ticker{\n      text-align: left;\n      float: left;\n      width: 33.33333%;\n    }\n    &-company{\n      text-align: center;\n      float: left;\n      width: 33.33333%;\n    }\n    &-updated{\n      text-align: right;\n      float:left;\n      width: 33.33333%;\n    }\n  }\n\n  .chart-buttons{\n    margin: 5px 0 0 16%;\n  }\n  .chart-button{\n    color: #dedfe4;\n    font-size: 16px;\n    padding: 5px 15px;\n    background-color: transparent;\n    margin: 0 10px;\n    border: none;\n    border-radius: 10px;\n\n    &:hover,&:focus {\n        background: #101010;\n        outline: none;\n        box-shadow: rgba(0, 0, 0, 0.4) 0px 3px 10px;\n    }\n  }\n`;\n\n// Hook for dynamic window size\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    \n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    \n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    \n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport const GraphSection = () => {\n  //grab global variables/functions to call in this file\n  const { graphData_AV_API, graphSymbol, current_symbol, current_company, graph_type } = useContext(GlobalContext);\n\n  const myWindow = useWindowSize();\n  const chart_width = myWindow.width*2/3;\n  const chart_height = myWindow.height*2/3;\n\n  // Processes update to API call and sends data to candlestick chart.\n  const processGraphData = () => {\n    let time_series_type;\n    if(graphData_AV_API['Time Series (15min)']){\n      time_series_type = 'Time Series (15min)';\n    }else if(graphData_AV_API['Time Series (60min)']){\n      time_series_type = 'Time Series (60min)';\n    }else{//if(graphData_AV_API['Time Series (Daily)']){\n      time_series_type = 'Time Series (Daily)';\n    }\n    const time_series_isDaily = time_series_type === 'Time Series (Daily)' ? true : false;\n    let split_ratio = 1.0;\n\n    //this arrays are sus\n    let graphDataProcessed = [];\n    let i = 0\n\n    let date_counter = 0;\n    let previous_date = '';\n    let stop_graphing = false;\n    // Iterate/translate API call to fit my charts inputs\n    for(let myDate in graphData_AV_API[time_series_type]){\n      // Counts unique dates, stops graphing according to graph_Type\n      if( !(previous_date===myDate.substr(0,10)) ){\n        previous_date = myDate.substr(0,10);\n        date_counter++;\n        \n        switch(graph_type){\n            case 'day':\n                if(date_counter>1) stop_graphing = true;\n                break;\n            case 'week':\n                if(date_counter>5) stop_graphing = true;\n                break;\n            case 'month':\n                if(date_counter>20) stop_graphing = true;\n                break;\n            case 'quarter':\n                if(date_counter>60) stop_graphing = true;\n                break;\n            case 'year':\n                if(date_counter>253) stop_graphing = true;\n                break;\n            default:\n        }\n        if(stop_graphing) break;\n      }\n\n      // Some API data open==close==high==low, resulting in candles of size 0x0, resulting in empty graph. \n      // flat_candle ensures candles are never 0x0 (invisible).\n      let flat_candle = +graphData_AV_API[time_series_type][myDate]['1. open']=== +graphData_AV_API[time_series_type][myDate]['4. close'] ? 0.001 : 0;\n      \n      graphDataProcessed.push({\n        \"time\": i++,\n        \"xAxis\": myDate,\n        \"open\": (+graphData_AV_API[time_series_type][myDate]['1. open']/split_ratio).toFixed(2),\n        \"close\": (flat_candle+graphData_AV_API[time_series_type][myDate]['4. close']/split_ratio).toFixed(2),\n        \"high\": (+graphData_AV_API[time_series_type][myDate]['2. high']/split_ratio).toFixed(2),\n        \"low\": (+graphData_AV_API[time_series_type][myDate]['3. low']/split_ratio).toFixed(2),\n        \"volume\": +graphData_AV_API[time_series_type][myDate][time_series_isDaily ? '6. volume' : '5. volume']\n      });\n      if(time_series_isDaily) split_ratio *= +graphData_AV_API[time_series_type][myDate]['8. split coefficient'];\n    }\n    graphDataProcessed.reverse();\n    return graphDataProcessed;\n  };\n\n  // Only for intialization: maybe make it display SPY as default\n  const [data, setData] = useState(() => processGraphData());\n  // Whenever graphData_AV_API is changed, code below will update graph\n  useEffect(() => {\n    if(current_symbol.length>0) setData(processGraphData());\n  }, [graph_type, current_symbol]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Convert JS date into easy to read date\n  const convertDate = dateString => {\n    if(!dateString) return \"error\";\n    const myYear = dateString.substring(2,4);\n    const myMonth = parseInt(dateString.substring(5,7), 10);\n    const myDay = parseInt(dateString.substring(8,10), 10);\n    if(dateString.length===10){\n      return myMonth + \"/\" + myDay + \"/\" + myYear;\n    }\n    const myHour = parseInt(dateString.substring(11,13), 10);\n    const myMinute = dateString.substring(14,16);\n\n    return myMonth + \"/\" + myDay + \"/\" + myYear + \" \" + myHour + \":\" + myMinute + \" EST\";\n  }\n\n  if(current_symbol.length>0){\n    return (\n      <>\n      <CSS>\n        <div className=\"chart-info-area\">\n          <div className=\"stock-info\">\n            <p className=\"stock-info-ticker\">Ticker: {current_symbol}</p>\n            <p className=\"stock-info-company\">Name: {current_company}</p>\n            <p className=\"stock-info-updated\">Updated: {convertDate(graphData_AV_API[\"Meta Data\"][\"3. Last Refreshed\"])}</p>\n          </div>\n          <Chart data={data} graph_type={graph_type} width={chart_width} height={chart_height} />\n        </div>\n        <div className=\"chart-buttons\">\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company,'day', false)}>\n            1D\n          </button>\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company,'week', false)}>\n            1W\n          </button>\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company, 'month', false)}>\n            1M\n          </button>\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company, 'quarter', false)}>\n            3M\n          </button>\n          <button className=\"chart-button\" onClick={() => graphSymbol(current_symbol, current_company, 'year', false)}>\n            1Y\n          </button>\n        </div>\n      </CSS>\n      </>\n    )\n  }else{\n    return (\n      <>\n      </>\n    )\n  }\n}\n\n\n","import React from 'react';\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { BacktestList } from './components/BacktestList';\nimport { AddBacktest } from './components/AddBacktest';\nimport { GraphSection } from './components/GraphSection';\nimport styled from \"styled-components\";\n\nimport { GlobalProvider } from './context/GlobalState';\n\nimport './App.css';\n\n\nconst CSS = styled.div`\n  background: #3d3d4a;\n  margin-bottom: 0px;\n  border-bottom: 1px solid transparent;\n`;\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <CSS>\n      <Header />\n      <GraphSection />\n      <AddBacktest />\n      <BacktestList />\n      <Footer />\n      </CSS>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}