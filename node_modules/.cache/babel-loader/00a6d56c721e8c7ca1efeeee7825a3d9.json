{"ast":null,"code":"import _toConsumableArray from\"/Users/JohnD/Documents/tradingview/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"/Users/JohnD/Documents/tradingview/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/JohnD/Documents/tradingview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/JohnD/Documents/tradingview/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{createContext,useReducer}from'react';import AppReducer from'./AppReducer';// AlphaVantage API Key = CQ5JZQYM4DG0OODA\n// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";var initialState={backtests:[],// Backtest list\nsymbol_list:[],// user input search results (1 API call)\ngraphData_AV_API:{},// graphs historical stock data (1 API call)\ncurrent_symbol:'',// current stock symbol being graphed\ncurrent_company:'',// current stock company name being graphed\ngraph_type:'',// tracks graph type for graphSection.js to know to add proper amount of candles to chart\ncache_TSDA:{},// cache AV_API for time series daily adjusted until user changes stock view(prevents unnecssary API calls)\ncache_TS15min:{},// cache AV_API for time series 15 min until user changes stock view(prevents unnecssary API calls)\ncache_TS60min:{}// cache AV_API for time series 60 min until user changes stock view(prevents unnecssary API calls)\n};// Create context\nexport var GlobalContext=/*#__PURE__*/createContext(initialState);// Provider component\nexport var GlobalProvider=function GlobalProvider(_ref){var children=_ref.children;var _useReducer=useReducer(AppReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// Actions\nfunction deleteBacktest(id){dispatch({type:'DELETE_BACKTEST',payload:id});}function addBacktest(backtest){dispatch({type:'ADD_BACKTEST',payload:backtest});}function cache_TSDA_function(_x){return _cache_TSDA_function.apply(this,arguments);}// User clicks outside search results\nfunction _cache_TSDA_function(){_cache_TSDA_function=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(data){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// If API limit: Alerts API limit reached, maintains current payload(stock data)\n// Else: update current payload\nif(data.Note){alert(\"MAX API CALLS. Please wait a minute for more. PeakTrades was built using Alpha Vantage's free API where the call frequency is 5 calls per minute.\");dispatch({type:'MAX_API',payload:data});}else{dispatch({type:'FILL_CACHE_TSDA',payload:data});}case 1:case\"end\":return _context.stop();}}},_callee);}));return _cache_TSDA_function.apply(this,arguments);}function clearSearch(_x2){return _clearSearch.apply(this,arguments);}// Updates search results from API when user searches for a stock\nfunction _clearSearch(){_clearSearch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(searchInputClear){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch({type:'STOCK_SEARCH',payload:[]});case 1:case\"end\":return _context2.stop();}}},_callee2);}));return _clearSearch.apply(this,arguments);}function stockSearch(_x3){return _stockSearch.apply(this,arguments);}// Graphs API data based on user selected stock symbol\nfunction _stockSearch(){_stockSearch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(searchInput){var response,data,new_symbol_list;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetch(\"https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=\".concat(searchInput.text,\"&apikey=CQ5JZQYM4DG0OODA\"));case 2:response=_context3.sent;_context3.next=5;return response.json();case 5:data=_context3.sent;//create temp list\nnew_symbol_list=[];// If API limit: alerts, maintains current results(if any)\n// Else: updates search results display properly\nif(data.Note){alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");// Maintains current search results\ndispatch({type:'MAX_API',payload:new_symbol_list});}else{//iterate over all search results\nObject.keys(data.bestMatches).forEach(function(e){//filter non-US stocks, then add\nif(data.bestMatches[e][\"4. region\"]===\"United States\"){var new_symbol={symbol:data.bestMatches[e][\"1. symbol\"],name:data.bestMatches[e][\"2. name\"]};new_symbol_list=[new_symbol].concat(_toConsumableArray(new_symbol_list));}});new_symbol_list.reverse();//update state of web app (official symbol_list)\ndispatch({type:'STOCK_SEARCH',payload:new_symbol_list});}case 8:case\"end\":return _context3.stop();}}},_callee3);}));return _stockSearch.apply(this,arguments);}function graphSymbol(_x4,_x5,_x6,_x7){return _graphSymbol.apply(this,arguments);}function _graphSymbol(){_graphSymbol=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(selectedSymbol,selectedCompany,graphType,doClearCache){var function_API,outputSize,interval_API,cache_exists,data,response;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:// Clear cache for new symbol search\nif(doClearCache){state.cache_TSDA={};state.cache_TS15min={};state.cache_TS60min={};}// Specific API call parameters\ninterval_API='';cache_exists=false;_context4.t0=graphType;_context4.next=_context4.t0==='day'?6:_context4.t0==='week'?8:10;break;case 6:if(state.cache_TS15min['Time Series (15min)']){cache_exists=true;data=state.cache_TS15min;}else{function_API='TIME_SERIES_INTRADAY';interval_API='&interval=15min';outputSize='compact';}return _context4.abrupt(\"break\",11);case 8:if(state.cache_TS60min['Time Series (60min)']){cache_exists=true;data=state.cache_TS60min;}else{function_API='TIME_SERIES_INTRADAY';interval_API='&interval=60min';outputSize='compact';}return _context4.abrupt(\"break\",11);case 10:if(state.cache_TSDA['Time Series (Daily)']){cache_exists=true;data=state.cache_TSDA;}else{function_API='TIME_SERIES_DAILY_ADJUSTED';outputSize='full';}case 11:if(cache_exists){_context4.next=18;break;}_context4.next=14;return fetch(\"https://www.alphavantage.co/query?function=\".concat(function_API,\"&symbol=\").concat(selectedSymbol).concat(interval_API,\"&outputsize=\").concat(outputSize,\"&apikey=CQ5JZQYM4DG0OODA\"));case 14:response=_context4.sent;_context4.next=17;return response.json();case 17:data=_context4.sent;case 18:// If API limit: Alerts API limit reached, maintains current payload(stock data)\n// Else: update current payload\nif(data.Note){alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");dispatch({type:'MAX_API',payload:[graphType,data]});}else if(data['Error Message']){alert(\"ERROR. This stock does not have valid data in the Alpha Vantage database.\");dispatch({type:'MAX_API',payload:[graphType,data]});}else{dispatch({type:'DISPLAY_GRAPHS',payload:[graphType,data,selectedCompany]});}// Scroll to top, makes sure user sees graph\nwindow.scrollTo(0,0);case 20:case\"end\":return _context4.stop();}}},_callee4);}));return _graphSymbol.apply(this,arguments);}return/*#__PURE__*/_jsx(GlobalContext.Provider,{value:{backtests:state.backtests,symbol_list:state.symbol_list,graphData_AV_API:state.graphData_AV_API,current_symbol:state.current_symbol,current_company:state.current_company,cache_TSDA:state.cache_TSDA,cache_TS15min:state.cache_TS15min,cache_TS60min:state.cache_TS60min,graph_type:state.graph_type,deleteBacktest:deleteBacktest,addBacktest:addBacktest,clearSearch:clearSearch,stockSearch:stockSearch,graphSymbol:graphSymbol,cache_TSDA_function:cache_TSDA_function},children:children});};","map":{"version":3,"names":["React","createContext","useReducer","AppReducer","initialState","backtests","symbol_list","graphData_AV_API","current_symbol","current_company","graph_type","cache_TSDA","cache_TS15min","cache_TS60min","GlobalContext","GlobalProvider","children","state","dispatch","deleteBacktest","id","type","payload","addBacktest","backtest","cache_TSDA_function","data","Note","alert","clearSearch","searchInputClear","stockSearch","searchInput","fetch","text","response","json","new_symbol_list","Object","keys","bestMatches","forEach","e","new_symbol","symbol","name","reverse","graphSymbol","selectedSymbol","selectedCompany","graphType","doClearCache","interval_API","cache_exists","function_API","outputSize","window","scrollTo"],"sources":["/Users/JohnD/Documents/tradingview/src/context/GlobalState.js"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// AlphaVantage API Key = CQ5JZQYM4DG0OODA\n\n// Initial state\nconst initialState = {\n    backtests: [],     // Backtest list\n    symbol_list: [],      // user input search results (1 API call)\n    graphData_AV_API: {}, // graphs historical stock data (1 API call)\n    current_symbol: '',   // current stock symbol being graphed\n    current_company: '',  // current stock company name being graphed\n    graph_type: '',       // tracks graph type for graphSection.js to know to add proper amount of candles to chart\n    cache_TSDA: {},        // cache AV_API for time series daily adjusted until user changes stock view(prevents unnecssary API calls)\n    cache_TS15min: {},        // cache AV_API for time series 15 min until user changes stock view(prevents unnecssary API calls)\n    cache_TS60min: {}        // cache AV_API for time series 60 min until user changes stock view(prevents unnecssary API calls)\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n    function deleteBacktest(id) {\n        dispatch({\n            type: 'DELETE_BACKTEST',\n            payload: id\n        });\n    }\n\n    function addBacktest(backtest) {\n        dispatch({\n            type: 'ADD_BACKTEST',\n            payload: backtest\n        });\n    }\n\n    async function cache_TSDA_function(data) {\n        // If API limit: Alerts API limit reached, maintains current payload(stock data)\n        // Else: update current payload\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. PeakTrades was built using Alpha Vantage's free API where the call frequency is 5 calls per minute.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: data\n            });\n        }else{\n            dispatch({\n                type: 'FILL_CACHE_TSDA',\n                payload: data\n            });\n        }\n    }\n\n    // User clicks outside search results\n    async function clearSearch(searchInputClear) {\n        dispatch({\n            type: 'STOCK_SEARCH',\n            payload: []\n        });\n    }\n\n    // Updates search results from API when user searches for a stock\n    async function stockSearch(searchInput) {\n        //API call for searching stock tickers\n        let response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${searchInput.text}&apikey=CQ5JZQYM4DG0OODA`);\n        let data = await response.json();\n\n        //create temp list\n        let new_symbol_list = [];\n\n        // If API limit: alerts, maintains current results(if any)\n        // Else: updates search results display properly\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n            // Maintains current search results\n            dispatch({\n                type: 'MAX_API',\n                payload: new_symbol_list\n            });\n        }else{\n        //iterate over all search results\n        Object.keys(data.bestMatches).forEach( (e) => {\n            //filter non-US stocks, then add\n            if(data.bestMatches[e][\"4. region\"] === \"United States\"){\n            let new_symbol = {\n                symbol: data.bestMatches[e][\"1. symbol\"],\n                name: data.bestMatches[e][\"2. name\"]\n            }\n            new_symbol_list = [new_symbol, ...new_symbol_list];\n            }\n        });\n        new_symbol_list.reverse();\n        //update state of web app (official symbol_list)\n        dispatch({\n            type: 'STOCK_SEARCH',\n            payload: new_symbol_list\n        });\n        }\n    }\n\n    // Graphs API data based on user selected stock symbol\n    async function graphSymbol(selectedSymbol, selectedCompany, graphType, doClearCache) {\n        // Clear cache for new symbol search\n        if(doClearCache){\n            state.cache_TSDA = {};\n            state.cache_TS15min = {};\n            state.cache_TS60min = {};\n        }\n\n        // Specific API call parameters\n        let function_API;\n        let outputSize;\n        let interval_API = '';\n        let cache_exists = false;\n        let data;\n        let response;\n        switch(graphType){\n            case 'day':\n                if(state.cache_TS15min['Time Series (15min)']){\n                    cache_exists = true;\n                    data = state.cache_TS15min;\n                }else{\n                    function_API = 'TIME_SERIES_INTRADAY';\n                    interval_API = '&interval=15min';\n                    outputSize = 'compact';\n                }\n                break;\n            case 'week':\n                if(state.cache_TS60min['Time Series (60min)']){\n                    cache_exists = true;\n                    data = state.cache_TS60min;\n                }else{\n                    function_API = 'TIME_SERIES_INTRADAY';\n                    interval_API = '&interval=60min';\n                    outputSize = 'compact';\n                }\n                break;\n            default:\n                if(state.cache_TSDA['Time Series (Daily)']){\n                    cache_exists = true;\n                    data = state.cache_TSDA;\n                }else{\n                    function_API = 'TIME_SERIES_DAILY_ADJUSTED';\n                    outputSize = 'full';\n                }\n        }\n        if(!cache_exists){\n            response = await fetch(`https://www.alphavantage.co/query?function=${function_API}&symbol=${selectedSymbol}${interval_API}&outputsize=${outputSize}&apikey=CQ5JZQYM4DG0OODA`);\n            data = await response.json();\n        }\n\n\n\n        // If API limit: Alerts API limit reached, maintains current payload(stock data)\n        // Else: update current payload\n        if(data.Note){\n            alert(\"MAX API CALLS. Please wait a minute for more. However, it was built using Alpha Vantage's standard API where the call frequency is 5 calls per minute and 500 calls per day.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: [graphType,data]\n            });\n        }else if(data['Error Message']){\n            alert(\"ERROR. This stock does not have valid data in the Alpha Vantage database.\");\n            dispatch({\n                type: 'MAX_API',\n                payload: [graphType,data]\n            });\n        }else{\n            dispatch({\n                type: 'DISPLAY_GRAPHS',\n                payload: [graphType,data, selectedCompany]\n            });\n        }\n\n        // Scroll to top, makes sure user sees graph\n        window.scrollTo(0, 0)\n    }\n\n    return (<GlobalContext.Provider value={{\n        backtests: state.backtests,\n        symbol_list: state.symbol_list,\n        graphData_AV_API: state.graphData_AV_API,\n        current_symbol: state.current_symbol,\n        current_company: state.current_company,\n        cache_TSDA: state.cache_TSDA,\n        cache_TS15min: state.cache_TS15min,\n        cache_TS60min: state.cache_TS60min,\n        graph_type: state.graph_type,\n        deleteBacktest,\n        addBacktest,\n        clearSearch,\n        stockSearch,\n        graphSymbol,\n        cache_TSDA_function\n    }}>\n        {children}\n        \n    </GlobalContext.Provider>);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}